{-|
Module      : Messages
Description : Output messages

This module contains a huge data type with many constructors, each representing
a different message that the script presentation engine may output. Any that it
doesn't know about will be regurgitated intact using 'MsgUnprocessed'. Others
are converted at some point, probably using 'imsg2doc' or 'imsg2doc_html', to a
message in natural language. In principle, the program's output can be
converted this way to other languages by defining a new case for that language
in the 'RenderMessage' instance for 'ScriptMessage'. So far only English is
supported (and even then it is incomplete).

This module was originally written via the Yesod library @shakespeare-i18n@, with
messages defined in external files. Unfortunately, due to performance bugs in
GHC, compiling this module this way was unacceptably slow, which made adding
new cases far more tedious than it should have been. Most of this file consists
of code generated by the @shakespeare-i18n@ Template Haskell splice function
'Text.Shakespeare.I18N.mkMessage', dumped with the @-ddump-splices@ option to
GHC, and edited for human readability.

Functions used in 'ScriptMessage''s instance of the localization method
'Text.Shakespeare.I18N.renderMessage' are defined in "MessageTools". The
Template Haskell version of this module required them to be in a separate
module due to TH stage restrictions.
-}
module HOI4.Messages (
        ScriptMessage (..)
    ,   StatementHandler
    ,   template, templateDoc
    ,   templateColor, templateColor'
    ,   message, messageText
    ,   imsg2doc, imsg2doc_html
    ,   IndentedMessage, IndentedMessages
    ) where

import Data.Monoid ((<>))

import Data.Text (Text)
import qualified Data.Text as T

import Text.PrettyPrint.Leijen.Text (Doc)
import qualified Text.PrettyPrint.Leijen.Text as PP
import Text.Shakespeare.I18N (RenderMessage (..))

import Abstract (GenericStatement)
import qualified Doc
import MessageTools -- import everything
import SettingsTypes (PPT, getLangs, GameData (..), IsGameData (..))

-- | Dummy type required by the Shakespeare machinery.
data Script = Script

-- | The abstract message type. Each constructor is a localizable message.
--
-- To add a new message, add a constructor here (using the same names as an
-- existing constructor if possible), then add a case for it in the
-- 'RenderMessage' instance for 'ScriptMessage'.
data ScriptMessage
    = MsgUnprocessed {scriptMessageMsg :: Text}
    -- scope messages
    -- trigger scopes
    | MsgAllAlliedCountry
    | MsgAllArmyLeader
    | MsgAllCharacter
    | MsgAllControlledState
    | MsgAllCoreState
    | MsgAllCountry
    | MsgAllCountryWithOriginalTag {scriptMessageWho :: Text}
    | MsgAllEnemyCountry
    | MsgAllGuaranteedCountry
    | MsgAllNavyLeader
    | MsgAllNeighborCountry
    | MsgAllNeighborState
    | MsgAllOccupiedCountry
    | MsgAllOperativeLeader
    | MsgAllOtherCountry
    | MsgAllOwnedState
    | MsgAllState
    | MsgAllSubjectCountries
    | MsgAllUnitLeader
    | MsgAnyAlliedCountry
    | MsgAnyArmyLeader
    | MsgAnyCharacter
    | MsgAnyControlledState
    | MsgAnyCoreState
    | MsgAnyCountry
    | MsgAnyCountryDivision
    | MsgAnyCountryWithCore
    | MsgAnyCountryWithOriginalTag {scriptMessageWho :: Text}
    | MsgAnyEnemyCountry
    | MsgAnyGuaranteedCountry
    | MsgAnyHomeAreaNeighborCountry
    | MsgAnyNavyLeader
    | MsgAnyNeighborCountry
    | MsgAnyNeighborState
    | MsgAnyOccupiedCountry
    | MsgAnyOperativeLeader
    | MsgAnyOtherCountry
    | MsgAnyOwnedState
    | MsgAnyState
    | MsgAnyStateDivision
    | MsgAnySubjectCountry
    | MsgAnyUnitLeader
    -- effect scope messages
    | MsgEveryArmyLeader
    | MsgEveryCharacter
    | MsgEveryControlledState
    | MsgEveryCoreState
    | MsgEveryCountry
    | MsgEveryCountryDivision
    | MsgEveryCountryWithOriginalTag {scriptMessageWho :: Text}
    | MsgEveryEnemyCountry
    | MsgEveryNavyLeader
    | MsgEveryNeighborCountry
    | MsgEveryNeighborState
    | MsgEveryOccupiedCountry
    | MsgEveryOperative
    | MsgEveryOtherCountry
    | MsgEveryOwnedState
    | MsgEveryPossibleCountry
    | MsgEveryState
    | MsgEveryStateDivision
    | MsgEverySubjectCountry
    | MsgEveryUnitLeader
    | MsgGlobalEveryArmyLeader
    | MsgRandomArmyLeader
    | MsgRandomCharacter
    | MsgRandomControlledState
    | MsgRandomCoreState
    | MsgRandomCountry
    | MsgRandomCountryDivision
    | MsgRandomCountryWithOriginalTag {scriptMessageWho :: Text}
    | MsgRandomEnemyCountry
    | MsgRandomNavyLeader
    | MsgRandomNeighborCountry
    | MsgRandomNeighborState
    | MsgRandomOccupiedCountry
    | MsgRandomOperative
    | MsgRandomOtherCountry
    | MsgRandomOwnedControlledState
    | MsgRandomOwnedState
    | MsgRandomState
    | MsgRandomStateDivision
    | MsgRandomSubjectCountry
    | MsgRandomUnitLeader
    -- dual scope messages
    | MsgROOT
    | MsgROOTSCOPECountry
    | MsgROOTSCOPEState
    | MsgROOTSCOPEOperative
    | MsgROOTSCOPEUnitLeader
    | MsgROOTSCOPECharacter
    | MsgROOTCountry
    | MsgROOTState
    | MsgROOTOperative
    | MsgROOTUnitLeader

    | MsgPREV
    | MsgPREVPREV
    | MsgPREVPREVPREV
    | MsgPREVSCOPECharacter
    | MsgPREVSCOPECountry
    | MsgPREVSCOPEOperative
    | MsgPREVSCOPEState
    | MsgPREVSCOPEUnitLeader
    | MsgPREVSCOPEFROM
    | MsgPREVSCOPEMisc
    | MsgPREVSCOPECustom
    | MsgPREVSCOPECustom2
    | MsgPREVCharacter
    | MsgPREVCountry
    | MsgPREVDivision
    | MsgPREVState
    | MsgPREVStateOwner
    | MsgPREVOperative
    | MsgPREVUnitLeader
    | MsgPREVFROM
    | MsgPREVCustom
    | MsgTHISCharacter
    | MsgTHISCountry
    | MsgTHISDivision
    | MsgTHISState
    | MsgTHISOperative
    | MsgTHISUnitLeader
    | MsgTHISCustom

    | MsgFROM
    | MsgFROMSCOPE
    | MsgFROMFROMSCOPE
    | MsgFROMFROMFROMSCOPE

    | MsgMISC

    | MsgOverlordSCOPE
    | MsgOverlord
    | MsgOverlordOf {scriptMessageWhat :: Text}
    | MsgFactionLeaderSCOPE
    | MsgFactionLeader
    | MsgFactionLeaderOf {scriptMessageWhat :: Text}
    | MsgOwnerSCOPE
    | MsgOwnerStateSCOPE
    | MsgOwnerUnitSCOPE
    | MsgOwnerOfSCOPE {scriptMessageWhat :: Text}
    | MsgOwnerState
    | MsgOwnerUnit
    | MsgOwner
    | MsgOwnerOf {scriptMessageWhat :: Text}
    | MsgControllerSCOPE
    | MsgController
    | MsgControllerOf {scriptMessageWhat :: Text}
    | MsgCapitalSCOPE
    | MsgCapital
    | MsgState {scriptMessageWhere :: Text}
    | MsgSCOPEEventTarget {scriptMessageTag :: Text}
    | MsgEventTargetVar {scriptMessageTag :: Text}
    | MsgSCOPEVariable {scriptMessageTag :: Text}
    | MsgVariable {scriptMessageTag :: Text}
    -- array
    | MsgAllOfScopes {scriptMessageWhat :: Text}
    | MsgAnyOfScopes {scriptMessageWhat :: Text}
    | MsgForEachScopeLoop {scriptMessageWhat :: Text}
    | MsgRandomScopeInArray {scriptMessageWhat :: Text}
    -- flow control messages
    | MsgAnd
    | MsgNot
    | MsgOr
    | MsgCountTriggers {scriptMessageAmt :: Double}
    | MsgHiddenTriggers
    | MsgCustomTriggerTooltip
    | MsgHiddenEffect
    | MsgElse
    | MsgElseIf
    | MsgIf
    | MsgLimit
    | MsgPrioritize {scriptMessageWhat :: Text}
    | MsgOriginalTagToCheck {scriptMessageWho :: Text}
    | MsgWhile
    | MsgFor
    | MsgRandom
    | MsgRandomList
    | MsgRandomChance {scriptMessageChance :: Double}
    | MsgRandomVarChance {scriptMessageWhat :: Text}
    | MsgRandomChanceHOI4 {scriptMessageChance :: Double, scriptMessageAmt :: Double}
    -- other messages to be sorted
    | MsgKillCountryLeader
    | MsgLeaveFaction
    | MsgMarkFocusTreeLayoutDirty
    | MsgRetire
    | MsgRetireCountryLeader
    | MsgSetLeaderDescription
    | MsgSetPortraits
    | MsgGainLosePosIcon {scriptMessageIcon :: Text, scriptMessageLoc :: Text, scriptMessageAmt :: Double}
    | MsgGainLoseLocIconVar {scriptMessageIcon :: Text, scriptMessageLoc :: Text, scriptMessageAmtText :: Text}
    | MsgAddExtraStateSharedBuildingSlots {scriptMessageIcon :: Text, scriptMessageAmt :: Double}
    | MsgAddExtraStateSharedBuildingSlotsVar {scriptMessageIcon :: Text, scriptMessageAmtText :: Text}
    | MsgGainLocPC {scriptMessageIcon :: Text, scriptMessageLoc :: Text, scriptMessageAmt :: Double}
    | MsgCreateFaction {scriptMessageWhat :: Text}
    | MsgHasCountryLeaderWithTrait {scriptMessageWhat :: Text}
    | MsgHasDecision {scriptMessageKey :: Text, scriptMessageWhat :: Text}
    | MsgHasTech {scriptMessageWhat :: Text}
    | MsgHasTemplate {scriptMessageWhat :: Text}
    | MsgOccupationLaw {scriptMessageWhat :: Text}
    | MsgDiplomaticRelation {scriptMessageWhat :: Text, scriptMessageWhom :: Text}
    | MsgGiveResourceRights {scriptMessageWho :: Text, scriptMessageWhere :: Text, scriptMessageWhat :: Text}
    | MsgTrait {scriptMessageYn :: Bool}
    | MsgTraitIdeo {scriptMessageYn :: Bool, scriptMessageWhat :: Text}
    | MsgTraitChar {scriptMessageWho :: Text, scriptMessageYn :: Bool}
    | MsgTraitCharIdeo {scriptMessageWho :: Text, scriptMessageYn :: Bool, scriptMessageWhat :: Text}
    | MsgAddCountryLeaderTrait
    | MsgRemoveCountryLeaderTrait
    | MsgModifyCountryLeaderTrait
    | MsgReplaceCountryLeaderTrait {scriptMessageWhat :: Text}
    | MsgAddUnitLeaderTrait
    | MsgRemoveUnitLeaderTrait
    | MsgAddTimedUnitLeaderTrait {scriptMessageWhat :: Text, scriptMessageAmt :: Double}
    | MsgAddTimedUnitLeaderTraitVar {scriptMessageWhat :: Text, scriptMessageAmtText :: Text}
    | MsgHasTrait {scriptMessageWhat :: Text}
    | MsgAddSkill {scriptMessageWhat :: Text, scriptMessageAmt :: Double}
    | MsgTooltip {scriptMessageWhat :: Text}
    | MsgCustomEffectTooltip {scriptMessageWhat :: Text}
    | MsgRemoveStateClaim {scriptMessageWhat :: Text}
    | MsgRemoveStateCore {scriptMessageWhat :: Text}
    | MsgSetStateController {scriptMessageWhat :: Text}
    | MsgSetStateOwner {scriptMessageWhat :: Text}
    | MsgOwnsState {scriptMessageWhat :: Text}
    | MsgControlsState {scriptMessageWhat :: Text}
    | MsgHasFullControlOfState {scriptMessageWhat :: Text}
    | MsgClearFlag {scriptMessageFlagType :: Text, scriptMessageName :: Text, scriptMessageLoc :: Text}
    | MsgHasFlag {scriptMessageFlagType :: Text, scriptMessageName :: Text, scriptMessageLoc :: Text}
    | MsgHasFlagFor {scriptMessageFlagType :: Text, scriptMessageName :: Text, scriptMessageAmtText :: Text, scriptMessageTime :: Text, scriptMessageDate :: Text, scriptMessageLoc :: Text}
    | MsgSetFlag {scriptMessageFlagType :: Text, scriptMessageName :: Text, scriptMessageLoc :: Text}
    | MsgSetFlagFor {scriptMessageFlagType :: Text, scriptMessageName :: Text, scriptMessageAmtText :: Text, scriptMessageDaysText :: Text, scriptMessageLoc :: Text}
    | MsgHadFlag {scriptMessageFlagType :: Text, scriptMessageName :: Text, scriptMessageDays :: Double, scriptMessageLoc :: Text}
    | MsgModifyFlag {scriptMessageFlagType :: Text, scriptMessageFlag :: Text, scriptMessageAmt :: Double, scriptMessageLoc :: Text}
    | MsgModifyFlagVar {scriptMessageFlagType :: Text, scriptMessageFlag :: Text, scriptMessageAmtText :: Text, scriptMessageLoc :: Text}
    | MsgCharacterFlag
    | MsgCountryFlag
    | MsgGlobalFlag
    | MsgStateFlag
    | MsgUnitLeaderFlag
    | MsgHasAddedTensionAmount {scriptMessageAmt :: Double, scriptMessageCompare :: Text}
    | MsgHasAddedTensionAmountVar {scriptMessageAmtText :: Text, scriptMessageCompare :: Text}
    | MsgHasAirExperience {scriptMessageAmt :: Double, scriptMessageCompare :: Text}
    | MsgHasAirExperienceVar {scriptMessageAmtText :: Text, scriptMessageCompare :: Text}
    | MsgHasArmyExperience {scriptMessageAmt :: Double, scriptMessageCompare :: Text}
    | MsgHasArmyExperienceVar {scriptMessageAmtText :: Text, scriptMessageCompare :: Text}
    | MsgHasBombingWarSupport {scriptMessageAmt :: Double, scriptMessageCompare :: Text}
    | MsgHasBombingWarSupportVar {scriptMessageAmtText :: Text, scriptMessageCompare :: Text}
    | MsgHasCasualtiesWarSupport {scriptMessageAmt :: Double, scriptMessageCompare :: Text}
    | MsgHasCasualtiesWarSupportVar {scriptMessageAmtText :: Text, scriptMessageCompare :: Text}
    | MsgHasConvoysWarSupport {scriptMessageAmt :: Double, scriptMessageCompare :: Text}
    | MsgHasConvoysWarSupportVar {scriptMessageAmtText :: Text, scriptMessageCompare :: Text}
    | MsgHasEquipment {scriptMessageAmt :: Double, scriptMessageCompare :: Text, scriptMessageWhat :: Text}
    | MsgHasEquipmentVar {scriptMessageAmtText :: Text, scriptMessageCompare :: Text, scriptMessageWhat :: Text}
    | MsgHasNavyExperience {scriptMessageAmt :: Double, scriptMessageCompare :: Text}
    | MsgHasNavyExperienceVar {scriptMessageAmtText :: Text, scriptMessageCompare :: Text}
    | MsgHasArmyManpower {scriptMessageAmt :: Double, scriptMessageCompare :: Text}
    | MsgHasArmyManpowerVar {scriptMessageAmtText :: Text, scriptMessageCompare :: Text}
    | MsgHasLegitimacy {scriptMessageAmt :: Double, scriptMessageCompare :: Text}
    | MsgHasLegitimacyVar {scriptMessageAmtText :: Text, scriptMessageCompare :: Text}
    | MsgHasManpower {scriptMessageAmt :: Double, scriptMessageCompare :: Text}
    | MsgHasManpowerVar {scriptMessageAmtText :: Text, scriptMessageCompare :: Text}
    | MsgHasPoliticalPower {scriptMessageAmt :: Double, scriptMessageCompare :: Text}
    | MsgHasPoliticalPowerVar {scriptMessageAmtText :: Text, scriptMessageCompare :: Text}
    | MsgPoliticalPowerDaily {scriptMessageAmt :: Double, scriptMessageCompare :: Text}
    | MsgPoliticalPowerDailyVar {scriptMessageAmtText :: Text, scriptMessageCompare :: Text}
    | MsgHasStability {scriptMessageAmt :: Double, scriptMessageCompare :: Text}
    | MsgHasStabilityVar {scriptMessageAmtText :: Text, scriptMessageCompare :: Text}
    | MsgHasWarSupport {scriptMessageAmt :: Double, scriptMessageCompare :: Text}
    | MsgHasWarSupportVar {scriptMessageAmtText :: Text, scriptMessageCompare :: Text}
    | MsgIndustrialComplex {scriptMessageAmt :: Double, scriptMessageCompare :: Text}
    | MsgIndustrialComplexVar {scriptMessageAmtText :: Text, scriptMessageCompare :: Text}
    | MsgInfrastructure {scriptMessageAmt :: Double, scriptMessageCompare :: Text}
    | MsgInfrastructureVar {scriptMessageAmtText :: Text, scriptMessageCompare :: Text}
    | MsgNuclearReactor {scriptMessageAmt :: Double, scriptMessageCompare :: Text}
    | MsgNuclearReactorVar {scriptMessageAmtText :: Text, scriptMessageCompare :: Text}
    | MsgNumOfControlledFactories {scriptMessageAmt :: Double, scriptMessageCompare :: Text}
    | MsgNumOfControlledFactoriesVar {scriptMessageAmtText :: Text, scriptMessageCompare :: Text}
    | MsgNumOfControlledStates {scriptMessageAmt :: Double, scriptMessageCompare :: Text}
    | MsgNumOfControlledStatesVar {scriptMessageAmtText :: Text, scriptMessageCompare :: Text}
    | MsgNumOfCivilianFactories {scriptMessageAmt :: Double, scriptMessageCompare :: Text}
    | MsgNumOfCivilianFactoriesVar {scriptMessageAmtText :: Text, scriptMessageCompare :: Text}
    | MsgNumOfAvailableCivilianFactories {scriptMessageAmt :: Double, scriptMessageCompare :: Text}
    | MsgNumOfAvailableCivilianFactoriesVar {scriptMessageAmtText :: Text, scriptMessageCompare :: Text}
    | MsgNumOfProjectFactories {scriptMessageAmt :: Double, scriptMessageCompare :: Text}
    | MsgNumOfProjectFactoriesVar {scriptMessageAmtText :: Text, scriptMessageCompare :: Text}
    | MsgNumOfFactories {scriptMessageAmt :: Double, scriptMessageCompare :: Text}
    | MsgNumOfFactoriesVar {scriptMessageAmtText :: Text, scriptMessageCompare :: Text}
    | MsgNumOfMilitaryFactories {scriptMessageAmt :: Double, scriptMessageCompare :: Text}
    | MsgNumOfMilitaryFactoriesVar {scriptMessageAmtText :: Text, scriptMessageCompare :: Text}
    | MsgNumOfNukes {scriptMessageAmt :: Double, scriptMessageCompare :: Text}
    | MsgNumOfNukesVar {scriptMessageAmtText :: Text, scriptMessageCompare :: Text}
    | MsgNumOfNavalFactories {scriptMessageAmt :: Double, scriptMessageCompare :: Text}
    | MsgNumOfNavalFactoriesVar {scriptMessageAmtText :: Text, scriptMessageCompare :: Text}
    | MsgNumOfOperatives {scriptMessageAmt :: Double, scriptMessageCompare :: Text}
    | MsgNumOfOperativesVar {scriptMessageAmtText :: Text, scriptMessageCompare :: Text}
    | MsgNumSubjects {scriptMessageAmt :: Double, scriptMessageCompare :: Text}
    | MsgNumSubjectsVar {scriptMessageAmtText :: Text, scriptMessageCompare :: Text}
    | MsgOriginalResearchSlots {scriptMessageAmt :: Double, scriptMessageCompare :: Text}
    | MsgOriginalResearchSlotsVar {scriptMessageAmtText :: Text, scriptMessageCompare :: Text}
    | MsgStatePopulation {scriptMessageAmt :: Double, scriptMessageCompare :: Text}
    | MsgStatePopulationVar {scriptMessageAmtText :: Text, scriptMessageCompare :: Text}
    -- simpleflag/WithFlag messages
    | MsgAddClaimBy {scriptMessageWho :: Text, scriptMessageWhat :: Text}
    | MsgAddCoreOf {scriptMessageWho :: Text, scriptMessageWhat :: Text}
    | MsgAddNationality {scriptMessageWho :: Text, scriptMessageWhat :: Text}
    | MsgAddToFaction {scriptMessageWhom :: Text, scriptMessageWhat :: Text}
    | MsgChangeTagFrom {scriptMessageWho :: Text, scriptMessageWhat :: Text}
    | MsgCountryExists {scriptMessageWho :: Text, scriptMessageWhat :: Text}
    | MsgHasDefensiveWarWith {scriptMessageWhom :: Text, scriptMessageWhat :: Text}
    | MsgGiveGuarantee {scriptMessageWhom :: Text, scriptMessageWhat :: Text}
    | MsgGiveMilitaryAccess {scriptMessageWhom :: Text, scriptMessageWhat :: Text}
    | MsgHasAttacheFrom {scriptMessageWhom :: Text, scriptMessageWhat :: Text}
    | MsgHasBorderWarWith {scriptMessageWhom :: Text, scriptMessageWhat :: Text}
    | MsgHasGuaranteed {scriptMessageWhom :: Text, scriptMessageWhat :: Text}
    | MsgHasMilitaryAccessTo {scriptMessageWhom :: Text, scriptMessageWhat :: Text}
    | MsgHasNonAggressionPactWith {scriptMessageWhom :: Text, scriptMessageWhat :: Text}
    | MsgHasOffensiveWarWith {scriptMessageWhom :: Text, scriptMessageWhat :: Text}
    | MsgHasSubject {scriptMessageWhom :: Text, scriptMessageWhat :: Text}
    | MsgOccupiedCountryTag {scriptMessageWhom :: Text, scriptMessageWhat :: Text}
    | MsgInheritTechnology {scriptMessageWhom :: Text, scriptMessageWhat :: Text}
    | MsgIsAllyWith {scriptMessageWhom :: Text, scriptMessageWhat :: Text}
    | MsgIsControlledBy {scriptMessageWhom :: Text, scriptMessageWhat :: Text}
    | MsgIsExiledIn { scriptMessageWho :: Text, scriptMessageWhat :: Text }
    | MsgIsFullyControlledBy { scriptMessageWho :: Text, scriptMessageWhat :: Text }
    | MsgIsGuaranteedBy { scriptMessageWho :: Text, scriptMessageWhat :: Text }
    | MsgIsHostingExile { scriptMessageWho :: Text, scriptMessageWhat :: Text }
    | MsgIsInFactionWith {scriptMessageWhom :: Text, scriptMessageWhat :: Text}
    | MsgIsJustifyingWargoalAgainst {scriptMessageWhom :: Text, scriptMessageWhat :: Text}
    | MsgIsNeighborOf {scriptMessageWhom :: Text, scriptMessageWhat :: Text}
    | MsgIsOwnedAndControlledBy {scriptMessageWhom :: Text, scriptMessageWhat :: Text}
    | MsgIsPuppetOf {scriptMessageWhom :: Text, scriptMessageWhat :: Text}
    | MsgIsClaimedBy {scriptMessageWhom :: Text, scriptMessageWhat :: Text}
    | MsgIsStateCore {scriptMessageWhom :: Text, scriptMessageWhat :: Text}
    | MsgIsSubjectOf {scriptMessageWhom :: Text, scriptMessageWhat :: Text}
    | MsgIsOwnedBy {scriptMessageWhom :: Text, scriptMessageWhat :: Text}
    | MsgPuppet {scriptMessageWhom :: Text, scriptMessageWhat :: Text}
    | MsgRecallVolunteersFrom {scriptMessageWhom :: Text, scriptMessageWhat :: Text}
    | MsgRelease {scriptMessageWhom :: Text, scriptMessageWhat :: Text}
    | MsgReleasePuppet {scriptMessageWhom :: Text, scriptMessageWhat :: Text}
    | MsgRemoveClaimBy {scriptMessageWho :: Text, scriptMessageWhat :: Text}
    | MsgRemoveCoreOf {scriptMessageWho :: Text, scriptMessageWhat :: Text}
    | MsgRemoveFromFaction {scriptMessageWho :: Text, scriptMessageWhat :: Text}
    | MsgSetStateControllerTo {scriptMessageWho :: Text, scriptMessageWhat :: Text}
    | MsgCountryIs {scriptMessageWho :: Text, scriptMessageWhat :: Text}
    | MsgTransferStateTo {scriptMessageWho :: Text, scriptMessageWhat :: Text}
    | MsgHasWarWith {scriptMessageWhom :: Text, scriptMessageWhat :: Text}
    | MsgHasWarTogetherWith {scriptMessageWhom :: Text, scriptMessageWhat :: Text}
    | MsgOriginalTag {scriptMessageWhom :: Text, scriptMessageWhat :: Text}
    | MsgMakeWhitePeace {scriptMessageWhom :: Text, scriptMessageWhat :: Text}
    -- flagyesno messages
    | MsgCountryStartResistance {scriptMessageWho :: Text, scriptMessageWhat :: Text}
    | MsgStartResistance {scriptMessageYn :: Bool}
    -- other messages
    | MsgAddStateClaim {scriptMessageWhat :: Text}
    | MsgAddStateCore {scriptMessageWhat :: Text}
    | MsgExists {scriptMessageYn :: Bool}
    | MsgIsAIControlled {scriptMessageYn :: Bool}
    | MsgHasAttache {scriptMessageYn :: Bool}
    | MsgHasBorderWar {scriptMessageYn :: Bool}
    | MsgHasCapitulated {scriptMessageYn :: Bool}
    | MsgIsInFaction {scriptMessageYn :: Bool}
    | MsgIsInHomeArea {scriptMessageYn :: Bool}
    | MsgHasWar {scriptMessageYn :: Bool}
    | MsgIsCapital {scriptMessageYn :: Bool}
    | MsgIsCoastal {scriptMessageYn :: Bool}
    | MsgIsCountryLeader {scriptMessageYn :: Bool}
    | MsgIsFemale {scriptMessageYn :: Bool}
    | MsgIsFemaleLeader {scriptMessageYn :: Bool}
    | MsgIsGovernmentInExile {scriptMessageYn :: Bool}
    | MsgIsSubject {scriptMessageYn :: Bool}
    | MsgHasAutonomyState {scriptMessageIcon :: Text, scriptMessageWhat :: Text}
    | MsgAddOpinion {scriptMessageModid :: Text, scriptMessageWhat :: Text, scriptMessageWhom :: Text}
    | MsgReverseAddOpinion {scriptMessageModid :: Text, scriptMessageWhat :: Text, scriptMessageWho :: Text}
    | MsgAddOpinionDur {scriptMessageModid :: Text, scriptMessageWhat :: Text, scriptMessageWhom :: Text, scriptMessageYears :: Double}
    | MsgReverseAddOpinionDur {scriptMessageModid :: Text, scriptMessageWhat :: Text, scriptMessageWho :: Text, scriptMessageYears :: Double}
    | MsgAddNamedThreat {scriptMessageIcon :: Text, scriptMessageAmt :: Double, scriptMessageWhom :: Text}
    | MsgAddTechBonus {scriptMessageAmt :: Double, scriptMessageName :: Text, scriptMessageUses :: Double}
    | MsgAddTechBonusAhead {scriptMessageAmt :: Double, scriptMessageName :: Text, scriptMessageUses :: Double}
    | MsgAddTechBonusAheadBoth {scriptMessageBonus :: Double, scriptMessageYearahead :: Double, scriptMessageName :: Text, scriptMessageUses :: Double}
    | MsgAddToWar {scriptMessageWho :: Text, scriptMessageWhom :: Text, scriptMessageWhy :: Text}
    | MsgCreateEquipmentVariant {scriptMessageWhat :: Text, scriptMessageWhat2 :: Text}
    | MsgCreateWG {scriptMessageWhat :: Text, scriptMessageWhom :: Text, scriptMessageStates :: Text}
    | MsgCreateWGDuration {scriptMessageWhat :: Text, scriptMessageWhom :: Text, scriptMessageAmt :: Double, scriptMessageStates :: Text}
    | MsgRegion {scriptMessageRegion :: Text}
    | MsgCreateUnit {scriptMessageWho :: Text, scriptMessageWhat :: Text}
    | MsgHasDynamicMod {scriptMessageModid :: Text}
    | MsgHasDynamicModFlag {scriptMessage_icon :: Text, scriptMessageWho :: Text, scriptMessageModid :: Text}
    | MsgHasOpinionMod {scriptMessageModid :: Text}
    | MsgHasPowerBalance {scriptMessageWhat :: Text}
    | MsgRemoveOpinionMod {scriptMessageModid :: Text, scriptMessageWhat :: Text, scriptMessageWhom :: Text}
    | MsgCountryEvent
    | MsgNewsEvent
    | MsgStateEvent
    | MsgOperativeEvent
    | MsgUnitLeaderEvent
    | MsgTriggerEvent {scriptMessageEvttype :: Text, scriptMessageEvtid :: Text, scriptMessageName :: Text}
    | MsgTriggerEventDays {scriptMessageEvttype :: Text, scriptMessageEvtid :: Text, scriptMessageName :: Text, scriptMessageDays :: Double}
    | MsgTriggerEventTime {scriptMessageEvttype :: Text, scriptMessageEvtid :: Text, scriptMessageName :: Text, scriptMessageTime :: Text}
    | MsgDeclareWarOn {scriptMessageWhom :: Text, scriptMessageWhat :: Text, scriptMessageStates :: Text}
    | MsgHasDLC {scriptMessageIcon :: Text, scriptMessageDlc :: Text}
    | MsgSetDemilitarizedZone {scriptMessageYn :: Bool}
    | MsgHasIdea {scriptMessageWhat :: Text, scriptMessageIcon :: Text, scriptMessageKey :: Text, scriptMessageLoc :: Text}
    | MsgAddIdea {scriptMessageWhat :: Text, scriptMessageIcon :: Text, scriptMessageKey :: Text, scriptMessageLoc :: Text}
    | MsgRemoveIdea {scriptMessageWhat :: Text, scriptMessageIcon :: Text, scriptMessageKey :: Text, scriptMessageLoc :: Text}
    | MsgAddTimedIdea {scriptMessageWhat :: Text, scriptMessageIcon :: Text, scriptMessageKey :: Text, scriptMessageLoc :: Text, scriptMessageDays :: Double}
    | MsgModifyTimedIdea {scriptMessageWhat :: Text, scriptMessageIcon :: Text, scriptMessageKey :: Text, scriptMessageLoc :: Text, scriptMessageDays :: Double}
    | MsgModifyIdea {scriptMessageCategory :: Text, scriptMessageIcon :: Text, scriptMessageKey :: Text, scriptMessageLoc :: Text, scriptMessageCategory2 :: Text, scriptMessageIcon2 :: Text, scriptMessageKey2 :: Text, scriptMessageLoc2 :: Text}
    | MsgReplaceIdea {scriptMessageCategory :: Text, scriptMessageIcon :: Text, scriptMessageKey :: Text, scriptMessageLoc :: Text, scriptMessageCategory2 :: Text, scriptMessageIcon2 :: Text, scriptMessageKey2 :: Text, scriptMessageLoc2 :: Text}
    | MsgEffectBox {scriptMessageLoc :: Text, scriptMessageKey :: Text, scriptMessageIcon :: Text, scriptMessageDesc :: Text}
    | MsgEffectBoxEnd  {scriptMessageIndent :: Int}
    | MsgShowIdea {scriptMessageLoc :: Text, scriptMessageKey :: Text}
    | MsgHasOpinion {scriptMessageAmtText :: Text, scriptMessageWhom :: Text, scriptMessageCompare :: Text }
    | MsgSetRule {scriptMessageAmt :: Double}
    | MsgSetRuleYesNo {scriptMessageIcon :: Text, scriptMessageWhat :: Text}
    | MsgSetTechnology {scriptMessageAmt :: Double, scriptMessageWhat :: Text}
    | MsgAddDoctrineCostReduction {scriptMessageAmt :: Double, scriptMessageAmt2 :: Double, scriptMessageWhat :: Text}
    | MsgAddEquipmentToStockpile {scriptMessageAmt :: Double, scriptMessageWho :: Text, scriptMessageWhat :: Text, scriptMessageWhat2 :: Text}
    | MsgAddEquipmentToStockpileVar {scriptMessageAmtText :: Text, scriptMessageWho :: Text, scriptMessageWhat :: Text, scriptMessageWhat2 :: Text}
    | MsgFreeBuildingSlots {scriptMessageCompare :: Text, scriptMessageAmt :: Double, scriptMessageWhat :: Text, scriptMessageYn :: Bool }
    | MsgIsDemilitarizedZone {scriptMessageYn :: Bool}
    | MsgNoBaseWeight
    | MsgAIBaseWeight {scriptMessageAmt :: Double}
    | MsgAIFactorOneline {scriptMessageFactor :: Text, scriptMessageMultiplier :: Double}
    | MsgAIAddOneline {scriptMessageFactor :: Text, scriptMessageMultiplier :: Double}
    | MsgAIFactorHeader {scriptMessageMultiplier :: Double}
    | MsgAIAddHeader {scriptMessageMultiplier :: Double}
    | MsgResetProvinceName {scriptMessageAmt :: Double}
    | MsgHasCompletedFocus {scriptMessageIcon :: Text, scriptMessageWhat :: Text, scriptMessageLoc :: Text}
    | MsgCompleteNationalFocus {scriptMessageIcon :: Text, scriptMessageWhat :: Text, scriptMessageLoc :: Text}
    | MsgUnlockNationalFocus {scriptMessageIcon :: Text, scriptMessageWhat :: Text, scriptMessageLoc :: Text}
    | MsgFocus {scriptMessageIcon :: Text, scriptMessageWhat :: Text, scriptMessageLoc :: Text}
    | MsgFocusProgress {scriptMessageIcon :: Text, scriptMessageWhat :: Text, scriptMessageLoc :: Text, scriptMessageCompare :: Text}
    | MsgUncompleteNationalFocus {scriptMessageIcon :: Text, scriptMessageWhat :: Text, scriptMessageLoc :: Text, scriptMessageYn :: Bool}
    | MsgHasArmySize {scriptMessageCompare :: Text, scriptMessageAmt :: Double, scriptMessageWhat :: Text}
    | MsgHasNavySize {scriptMessageCompare :: Text, scriptMessageAmt :: Double, scriptMessageWhat :: Text}
    | MsgHasNavySizeVar {scriptMessageCompare :: Text, scriptMessageAmtText :: Text, scriptMessageWhat :: Text}
    | MsgSetCapital {scriptMessageWhat :: Text, scriptMessageWhere :: Text}
    | MsgSetCharacterName {scriptMessageWhat :: Text}
    | MsgSetCharacterNameType {scriptMessageWho :: Text, scriptMessageWhat :: Text}
    | MsgHasCharacter {scriptMessageWho :: Text}
    | MsgRetireCharacter {scriptMessageWho :: Text}
    | MsgSetPopularity {scriptMessageIcon :: Text, scriptMessageWhat :: Text, scriptMessageAmt :: Double}
    | MsgSetPopularityVar {scriptMessageIcon :: Text, scriptMessageWhat :: Text, scriptMessageAmtText :: Text}
    | MsgStateId {scriptMessageWhat :: Text}
    | MsgTransferState {scriptMessageWhat :: Text}
    | MsgSetStateName {scriptMessageWhat :: Text}
    | MsgSetStateCategory {scriptMessageWhat :: Text}
    | MsgAlways {scriptMessageYn :: Bool}
    | MsgLockDivision {scriptMessageYn :: Bool}
    | MsgIsUnitLeader {scriptMessageYn :: Bool}
    | MsgAddStateModifier
    | MsgAddPowerBalanceModifier { scriptMessageWho :: Text, scriptMessageWhoKey :: Text, scriptMessageWhat :: Text, scriptMessageWhatKey :: Text }
    | MsgRemovePowerBalanceModifier { scriptMessageWho :: Text, scriptMessageWhat :: Text, scriptMessageWhoKey :: Text , scriptMessageWhatKey :: Text }
    | MsgHasPowerBalanceModifier { scriptMessageWho :: Text, scriptMessageWhat :: Text, scriptMessageWhoKey :: Text , scriptMessageWhatKey :: Text }
    | MsgModifier {scriptMessageWhat :: Text, scriptMessageAmt :: Double}
    | MsgModifierYellow {scriptMessageWhat :: Text, scriptMessageAmt :: Double}
    | MsgModifierSign {scriptMessageWhat :: Text, scriptMessageAmt :: Double}
    | MsgModifierColourPos {scriptMessageWhat :: Text, scriptMessageAmt :: Double}
    | MsgModifierColourNeg {scriptMessageWhat :: Text, scriptMessageAmt :: Double}
    | MsgModifierPc {scriptMessageWhat :: Text, scriptMessageAmt :: Double}
    | MsgModifierPcSign {scriptMessageWhat :: Text, scriptMessageAmt :: Double}
    | MsgModifierPcReduced {scriptMessageWhat :: Text, scriptMessageAmt :: Double}
    | MsgModifierPcReducedSign {scriptMessageWhat :: Text, scriptMessageAmt :: Double}
    | MsgModifierPcReducedSignMin {scriptMessageWhat :: Text, scriptMessageAmt :: Double}
    | MsgModifierPcPos {scriptMessageWhat :: Text, scriptMessageAmt :: Double}
    | MsgModifierPcNeg {scriptMessageWhat :: Text, scriptMessageAmt :: Double}
    | MsgModifierPcPosReduced {scriptMessageWhat :: Text, scriptMessageAmt :: Double}
    | MsgModifierPcNegReduced {scriptMessageWhat :: Text, scriptMessageAmt :: Double}
    | MsgModifierBop {scriptMessageWhat :: Text, scriptMessageAmt :: Double}
    | MsgModifierNoYes {scriptMessageWhat :: Text, scriptMessageAmt :: Double}
    | MsgModifierYesNo {scriptMessageWhat :: Text, scriptMessageAmt :: Double}
    | MsgModifierVar {scriptMessageWhat :: Text, scriptMessageAmtText :: Text}
    | MsgCustomModifierTooltip {scriptMessageLoc :: Text}
    | MsgAddCompliance {scriptMessageAmt :: Double}
    | MsgAddResearchSlot {scriptMessageAmt :: Double}
    | MsgAddResistance {scriptMessageAmt :: Double}
    | MsgAddThreat {scriptMessageAmt :: Double}
    | MsgSaveEventTargetAs {scriptMessageName :: Text}
    | MsgSaveGlobalEventTargetAs {scriptMessageName :: Text}
    | MsgDismantleFaction
    | MsgDropCosmeticTag
    | MsgSetCompliance {scriptMessageAmt :: Double}
    | MsgSetPoliticalPower {scriptMessageAmt :: Double}
    | MsgSetResistance {scriptMessageAmt :: Double}
    | MsgSetStability {scriptMessageAmt :: Double}
    | MsgSetWarSupport {scriptMessageAmt :: Double}
    | MsgAddLogistics {scriptMessageAmt :: Double}
    | MsgAddPlanning {scriptMessageAmt :: Double}
    | MsgAddDefense {scriptMessageAmt :: Double}
    | MsgAddAttack {scriptMessageAmt :: Double}
    | MsgAddCoordination {scriptMessageAmt :: Double}
    | MsgAddManeuver {scriptMessageAmt :: Double}
    | MsgSurrenderProgress {scriptMessageAmt :: Double, scriptMessageCompare :: Text}
    | MsgSurrenderProgressVar {scriptMessageAmtText :: Text, scriptMessageCompare :: Text}
    | MsgVariableTooltip { scriptMessageWhat :: Text}
    | MsgSetVariable { scriptMessageVar1 :: Text, scriptMessageVar2 :: Text}
    | MsgSetTempVariable { scriptMessageVar1 :: Text, scriptMessageVar2 :: Text}
    | MsgSetVariableVal { scriptMessageVar :: Text, scriptMessageAmt :: Double}
    | MsgSetTempVariableVal { scriptMessageVar :: Text, scriptMessageAmt :: Double}
    | MsgAddVariable { scriptMessageVar1 :: Text, scriptMessageVar2 :: Text}
    | MsgAddTempVariable { scriptMessageVar1 :: Text, scriptMessageVar2 :: Text}
    | MsgAddVariableVal { scriptMessageVar :: Text, scriptMessageAmt :: Double}
    | MsgAddTempVariableVal { scriptMessageVar :: Text, scriptMessageAmt :: Double}
    | MsgSubVariable { scriptMessageVar1 :: Text, scriptMessageVar2 :: Text}
    | MsgSubTempVariable { scriptMessageVar1 :: Text, scriptMessageVar2 :: Text}
    | MsgSubVariableVal { scriptMessageVar :: Text, scriptMessageAmt :: Double}
    | MsgSubTempVariableVal { scriptMessageVar :: Text, scriptMessageAmt :: Double}
    | MsgMulVariable { scriptMessageVar1 :: Text, scriptMessageVar2 :: Text}
    | MsgMulTempVariable { scriptMessageVar1 :: Text, scriptMessageVar2 :: Text}
    | MsgMulVariableVal { scriptMessageVar :: Text, scriptMessageAmt :: Double}
    | MsgMulTempVariableVal { scriptMessageVar :: Text, scriptMessageAmt :: Double}
    | MsgDivVariable { scriptMessageVar1 :: Text, scriptMessageVar2 :: Text}
    | MsgDivTempVariable { scriptMessageVar1 :: Text, scriptMessageVar2 :: Text}
    | MsgDivVariableVal { scriptMessageVar :: Text, scriptMessageAmt :: Double}
    | MsgDivTempVariableVal { scriptMessageVar :: Text, scriptMessageAmt :: Double}
    | MsgCheckVariable { scriptMessageCompare :: Text, scriptMessageVar1 :: Text, scriptMessageVar2 :: Text}
    | MsgCheckVariableVal { scriptMessageCompare :: Text, scriptMessageVar :: Text, scriptMessageAmt :: Double}
    | MsgClampVariableValVal { scriptMessageWhat :: Text, scriptMessageAmt :: Double, scriptMessageAmt2 :: Double}
    | MsgClampVariableValVar { scriptMessageWhat :: Text, scriptMessageAmt :: Double, scriptMessageVar2 :: Text}
    | MsgClampVariableVarVal { scriptMessageWhat :: Text, scriptMessageVar :: Text, scriptMessageAmt2 :: Double}
    | MsgClampVariableVarVar { scriptMessageWhat :: Text, scriptMessageVar :: Text, scriptMessageVar2 :: Text}
    | MsgClampTempVariableValVal { scriptMessageWhat :: Text, scriptMessageAmt :: Double, scriptMessageAmt2 :: Double}
    | MsgClampTempVariableValVar { scriptMessageWhat :: Text, scriptMessageAmt :: Double, scriptMessageVar2 :: Text}
    | MsgClampTempVariableVarVal { scriptMessageWhat :: Text, scriptMessageVar :: Text, scriptMessageAmt2 :: Double}
    | MsgClampTempVariableVarVar { scriptMessageWhat :: Text, scriptMessageVar :: Text, scriptMessageVar2 :: Text}
    | MsgEquVariable { scriptMessageVar1 :: Text, scriptMessageVar2 :: Text}
    | MsgEquVariableVal { scriptMessageVar :: Text, scriptMessageAmt :: Double}
    | MsgRoundVariable { scriptMessageVar :: Text }
    | MsgRoundTempVariable { scriptMessageVar :: Text }
    | MsgClearVariable { scriptMessageVar :: Text }
    | MsgHasVariable { scriptMessageVar :: Text }
    | MsgActivateDecision { scriptMessageLoc :: Text, scriptMessageKey :: Text }
    | MsgRemoveDecision { scriptMessageLoc :: Text, scriptMessageKey :: Text }
    | MsgActivateMission { scriptMessageLoc :: Text, scriptMessageKey :: Text }
    | MsgRemoveMission { scriptMessageLoc :: Text, scriptMessageKey :: Text }
    | MsgHasActiveMission { scriptMessageLoc :: Text, scriptMessageKey :: Text }
    | MsgActivateTargetedDecision { scriptMessageWho :: Text, scriptMessageLoc :: Text, scriptMessage_what_key :: Text, scriptMessageAtomKey :: Text }
    | MsgRemoveTargetedDecision { scriptMessageWho :: Text, scriptMessageLoc :: Text, scriptMessage_what_key :: Text, scriptMessageAtomKey :: Text }
    | MsgAddDaysRemove { scriptMessageLoc :: Text, scriptMessageKey :: Text, scriptMessageAmt :: Double }
    | MsgAddDaysRemoveVar { scriptMessageLoc :: Text, scriptMessageKey :: Text, scriptMessageAmtText :: Text }
    | MsgAddDaysMissionTimeout { scriptMessageLoc :: Text, scriptMessageKey :: Text, scriptMessageAmt :: Double }
    | MsgAddDaysMissionTimeoutVar { scriptMessageLoc :: Text, scriptMessageKey :: Text, scriptMessageAmtText :: Text }
    | MsgActivateMissionTooltip { scriptMessageLoc :: Text}
    | MsgHasDefensiveWar { scriptMessageYn :: Bool }
    | MsgHasIntelligenceAgency { scriptMessageYn :: Bool }
    | MsgLoadFocusTree { scriptMessageWhat :: Text }
    | MsgLoadFocusTreeKeep {scriptMessage_icon :: Text, scriptMessageWhat :: Text, scriptMessageYesNo :: Text }
    | MsgModifyBuildingResources {scriptMessageIcon :: Text, scriptMessageWhat :: Text, scriptMessageAmt :: Double }
    | MsgCoreCompliance { scriptMessage_icon :: Text, scriptMessageWho :: Text, scriptMessageCompare :: Text, scriptMessageAmt :: Double }
    | MsgCoreComplianceVar { scriptMessage_icon :: Text, scriptMessageWho :: Text, scriptMessageCompare :: Text, scriptMessageAmtText :: Text }
    | MsgCoreResistance { scriptMessage_icon :: Text, scriptMessageWho :: Text, scriptMessageCompare :: Text, scriptMessageAmt :: Double }
    | MsgCoreResistanceVar { scriptMessage_icon :: Text, scriptMessageWho :: Text, scriptMessageCompare :: Text, scriptMessageAmtText :: Text }
    | MsgHasVolunteersAmountFrom { scriptMessage_icon :: Text, scriptMessageWho :: Text, scriptMessageCompare :: Text, scriptMessageAmt :: Double }
    | MsgHasVolunteersAmountFromVar { scriptMessage_icon :: Text, scriptMessageWho :: Text, scriptMessageCompare :: Text, scriptMessageAmtText :: Text }
    | MsgPowerBalanceValue { scriptMessage_icon :: Text, scriptMessageWhat :: Text, scriptMessageCompare :: Text, scriptMessageAmt :: Double }
    | MsgPowerBalanceValueVar { scriptMessage_icon :: Text, scriptMessageWhat :: Text, scriptMessageCompare :: Text, scriptMessageAmtText :: Text }
    | MsgHasCivilWar {scriptMessageYn :: Bool}
    | MsgHasGovernment {scriptMessageIcon :: Text, scriptMessageWhat :: Text}
    | MsgIsHistoricalFocusOn { scriptMessageYn :: Bool }
    | MsgIsOperativeCaptured { scriptMessageYn :: Bool }
    | MsgAirBase {scriptMessageAmt :: Double, scriptMessageCompare :: Text}
    | MsgAirBaseVar {scriptMessageAmtText :: Text, scriptMessageCompare :: Text}
    | MsgAllianceStrengthRatio {scriptMessageAmt :: Double, scriptMessageCompare :: Text}
    | MsgAllianceStrengthRatioVar {scriptMessageAmtText :: Text, scriptMessageCompare :: Text}
    | MsgAmountResearchSlots {scriptMessageAmt :: Double, scriptMessageCompare :: Text}
    | MsgAmountResearchSlotsVar {scriptMessageAmtText :: Text, scriptMessageCompare :: Text}
    | MsgAnyWarScore {scriptMessageAmt :: Double, scriptMessageCompare :: Text}
    | MsgAnyWarScoreVar {scriptMessageAmtText :: Text, scriptMessageCompare :: Text}
    | MsgArmsFactory {scriptMessageAmt :: Double, scriptMessageCompare :: Text}
    | MsgArmsFactoryVar {scriptMessageAmtText :: Text, scriptMessageCompare :: Text}
    | MsgCommandPower {scriptMessageAmt :: Double, scriptMessageCompare :: Text}
    | MsgCommandPowerVar {scriptMessageAmtText :: Text, scriptMessageCompare :: Text}
    | MsgCompareAutonomyProgressRatio {scriptMessageAmt :: Double, scriptMessageCompare :: Text}
    | MsgCompareAutonomyProgressRatioVar {scriptMessageAmtText :: Text, scriptMessageCompare :: Text}
    | MsgDate {scriptMessageCompare :: Text, scriptMessageMonth :: Text, scriptMessageDay :: Double, scriptMessageYear :: Double}
    | MsgDockyard {scriptMessageAmt :: Double, scriptMessageCompare :: Text}
    | MsgDockyardVar {scriptMessageAmtText :: Text, scriptMessageCompare :: Text}
    | MsgCompliance {scriptMessageAmt :: Double, scriptMessageCompare :: Text}
    | MsgComplianceVar {scriptMessageAmtText :: Text, scriptMessageCompare :: Text}
    | MsgResistance {scriptMessageAmt :: Double, scriptMessageCompare :: Text}
    | MsgResistanceVar {scriptMessageAmtText :: Text, scriptMessageCompare :: Text}
    | MsgEnemiesStrengthRatio {scriptMessageAmt :: Double, scriptMessageCompare :: Text}
    | MsgEnemiesStrengthRatioVar {scriptMessageAmtText :: Text, scriptMessageCompare :: Text}
    | MsgIsCharacter {scriptMessageWhat :: Text}
    | MsgIsOnContinent {scriptMessageWhat :: Text}
    | MsgHasCountryLeader {scriptMessageWhom :: Text}
    | MsgIsIslandState {scriptMessageYn :: Bool}
    | MsgExportVariable { scriptMessageVar1 :: Text, scriptMessageVar2 :: Text}
    | MsgExportVariableWho { scriptMessageVar1 :: Text, scriptMessageVar2 :: Text, scriptMessageWhom :: Text}
    | MsgThreat {scriptMessageAmt :: Double, scriptMessageCompare :: Text}
    | MsgThreatVar {scriptMessageAmtText :: Text, scriptMessageCompare :: Text}
    | MsgFascismCompare {scriptMessageAmt :: Double, scriptMessageCompare :: Text}
    | MsgFascismCompareVar {scriptMessageAmtText :: Text, scriptMessageCompare :: Text}
    | MsgDemocraticCompare {scriptMessageAmt :: Double, scriptMessageCompare :: Text}
    | MsgDemocraticCompareVar {scriptMessageAmtText :: Text, scriptMessageCompare :: Text}
    | MsgCommunismCompare {scriptMessageAmt :: Double, scriptMessageCompare :: Text}
    | MsgCommunismCompareVar {scriptMessageAmtText :: Text, scriptMessageCompare :: Text}
    | MsgNeutralityCompare {scriptMessageAmt :: Double, scriptMessageCompare :: Text}
    | MsgNeutralityCompareVar {scriptMessageAmtText :: Text, scriptMessageCompare :: Text}
    | MsgAnnexCountry {scriptMessageWhom :: Text, scriptMessageWhat :: Text}
    | MsgSetNationality {scriptMessageWhat :: Text, scriptMessageWhere :: Text}
    | MsgSetNationalityChar {scriptMessageWho :: Text, scriptMessageWhat :: Text}
    | MsgModifyTechSharingBonus { scriptMessage_icon :: Text, scriptMessageWho :: Text, scriptMessageAmt :: Double }
    | MsgModifyTechSharingBonusVar { scriptMessage_icon :: Text, scriptMessageWho :: Text, scriptMessageAmtText :: Text }
    | MsgAddResource {scriptMessageIcon :: Text, scriptMessageWhat :: Text, scriptMessageAmt :: Double, scriptMessageWhere :: Text}
    | MsgAddResourceVar {scriptMessageIcon :: Text, scriptMessageWhat :: Text, scriptMessageAmtText :: Text, scriptMessageWhere :: Text}
    | MsgAddPopularity {scriptMessageIcon :: Text, scriptMessageWhat :: Text, scriptMessageAmt :: Double}
    | MsgAddPopularityVar {scriptMessageIcon :: Text, scriptMessageWhat :: Text, scriptMessageAmtText :: Text}
    | MsgAddPowerBalanceValue { scriptMessageLoc :: Text, scriptMessageKey :: Text, scriptMessageAmt :: Double }
    | MsgAddPowerBalanceValueVar { scriptMessageLoc :: Text, scriptMessageKey :: Text, scriptMessageAmtText :: Text }
    | MsgBuildRailway {scriptMessageAmt :: Double, scriptMessageStart :: Text, scriptMessageEnd :: Text}
    | MsgBuildRailwayProv {scriptMessageAmt :: Double, scriptMessageStartProv :: Double, scriptMessageEndProv :: Double}
    | MsgBuildRailwayPath {scriptMessageAmt :: Double, scriptMessageWhat :: Text}
    | MsgCanBuildRailway {scriptMessageStart :: Text, scriptMessageEnd :: Text}
    | MsgCanBuildRailwayProv {scriptMessageStartProv :: Double, scriptMessageEndProv :: Double}
    | MsgCanBuildRailwayPath {scriptMessagePath :: Text}
    | MsgSetProvinceName {scriptMessage_icon :: Text, scriptMessageWhom :: Text, scriptMessageAmt :: Double}
    | MsgSetProvinceNameVar {scriptMessage_icon :: Text, scriptMessage_whom :: Text, scriptMessage_amt_text :: Text}
    | MsgSetVictoryPoints {scriptMessageAmt2 :: Double, scriptMessageAmt :: Double}
    | MsgSetVictoryPointsVar {scriptMessageAmt2 :: Double, scriptMessageAmtText :: Text}
    | MsgAddVictoryPoints {scriptMessageAmt2 :: Double, scriptMessageAmt :: Double}
    | MsgAddVictoryPointsVar {scriptMessageAmt2 :: Double, scriptMessageAmtText :: Text}
    | MsgStockpileRatio {scriptMessage_icon :: Text, scriptMessageWhat :: Text, scriptMessageCompare :: Text, scriptMessageAmt :: Double}
    | MsgStockpileRatioVar {scriptMessage_icon :: Text, scriptMessageWhat :: Text, scriptMessageCompare :: Text, scriptMessageAmtText :: Text}
    | MsgStrengthRatio {scriptMessage_icon :: Text, scriptMessageWhom :: Text, scriptMessageCompare :: Text, scriptMessageAmt :: Double}
    | MsgStrengthRatioVar {scriptMessage_icon :: Text, scriptMessageWhom :: Text, scriptMessageCompare :: Text, scriptMessageAmtText :: Text}
    | MsgSetCosmeticTag {scriptMessageWhat :: Text}
    | MsgHasCosmeticTag {scriptMessageWhat :: Text}
    | MsgHasFocusTree {scriptMessageWhat :: Text}
    | MsgAddAce {scriptMessageName :: Text, scriptMessageCallsign :: Text, scriptMessageSurname :: Text}
    | MsgAddAiStrategy
    | MsgAddAutonomyRatio {scriptMessage_icon :: Text, scriptMessageWhat :: Text, scriptMessageAmt :: Double}
    | MsgAddAutonomyRatioVar {scriptMessage_icon :: Text, scriptMessageWhat :: Text, scriptMessageAmtText :: Text}
    | MsgAddAutonomyScore {scriptMessage_icon :: Text, scriptMessageWhat :: Text, scriptMessageAmt :: Double}
    | MsgAddAutonomyScoreVar {scriptMessage_icon :: Text, scriptMessageWhat :: Text, scriptMessageAmtText :: Text}
    | MsgAddFieldMarshalRole {scriptMessageWho :: Text}
    | MsgAddCorpsCommanderRole {scriptMessageWho :: Text}
    | MsgAddNavalCommanderRole {scriptMessageWho :: Text}
    | MsgAddAdvisorRole {scriptMessageWho :: Text, scriptMessageWhat :: Text}
    | MsgRemoveAdvisorRole {scriptmessage_icon :: Text, scriptMessageWho :: Text, scriptMessageWhat :: Text}
    | MsgAndIsHired
    | MsgAddCountryLeaderRole {scriptMessageWho :: Text, scriptMessageWhat :: Text}
    | MsgAddCountryLeaderRolePromoted {scriptMessageWho :: Text, scriptMessageWhat :: Text}
    | MsgPromoteCharacter {scriptMessageWho :: Text}
    | MsgCreateOperativeLeader {scriptMessageWho :: Text, scriptMessageWhat :: Text, scriptMessageYn :: Bool, scriptMessageYn2 :: Bool}
    | MsgDamageBuilding {scriptMessageIcon :: Text, scriptMessageWhat :: Text, scriptMessageAmt :: Double, scriptMessageProvince :: Double}
    | MsgDamageBuildingVar {scriptMessageIcon :: Text, scriptMessageWhat :: Text, scriptMessageAmtText :: Text, scriptMessageProvince :: Double}
    | MsgDivisionTemplate {scriptMessageWhat :: Text}
    | MsgDeleteUnitTemplateAndunits {scriptMessageYn :: Bool, scriptMessageWhat :: Text, scriptMessage_where :: Text}
    | MsgDeleteUnits {scriptMessageYn :: Bool, scriptMessageWhat :: Text, scriptMessage_where :: Text}
    | MsgDeleteUnit {scriptMessageYn :: Bool, scriptMessageWhat :: Text, scriptMessageWhere :: Text}
    | MsgArmyManpowerInState {scriptMessageComp :: Text, scriptMessageAmt :: Double, scriptMessageWhat :: Text, scriptMessageWhere :: Text, scriptMessage_where2 :: Text}
    | MsgDivisionsInState {scriptMessageComp :: Text, scriptMessageAmt :: Double, scriptMessageWhat :: Text, scriptMessageWhere :: Text, scriptMessage_where2 :: Text}
    | MsgDivisionsInBorderState {scriptMessageComp :: Text, scriptMessageAmt :: Double, scriptMessageWhat :: Text, scriptMessageWhere :: Text, scriptMessageWhere2 :: Text}
    | MsgAddOffsiteBuilding {scriptMessageIcon :: Text, scriptMessageWhat :: Text, scriptMessageAmt :: Double}
    | MsgAddOffsiteBuildingVar {scriptMessageIcon :: Text, scriptMessageWhat :: Text, scriptMessageAmtText :: Text}
    | MsgReleaseAutonomy {scriptMessageWho :: Text, scriptMessageIcon :: Text, scriptMessageWhat :: Text, scriptMessageAmt :: Double, scriptMessage_war :: Text}
    | MsgSetAutonomy {scriptMessageWho :: Text, scriptMessageIcon :: Text, scriptMessageWhat :: Text, scriptMessageAmt :: Double, scriptMessageWar :: Text}
    | MsgSetPolitics {scriptMessageIcon :: Text, scriptMessageWho :: Text, scriptMessageMonths :: Double}
    | MsgSetPoliticsVar {scriptMessageIcon :: Text, scriptMessageWho :: Text, scriptMessageAmtText :: Text}
    | MsgavalStrengthComparison { scriptMessageAmt :: Double, scriptMessageCompare :: Text, scriptMessageWho :: Text, scriptMessageWhat :: Text}
    | MsgStartCivilWar {scriptMessageWhat :: Text, scriptMessageAmtText :: Text}
    | MsgStartBorderWar {scriptMessageWhere :: Text, scriptMessageWhere2 :: Text, scriptMessageYn :: Bool}
    | MsgBorderWin
    | MsgBorderLoss
    | MsgBorderCancel
    | MsgBorderDefender
    | MsgBorderAttacker
    | MsgTriggerBorderEvent {scriptMessageEvttype :: Text, scriptMessageEvtid :: Text, scriptMessageName :: Text, scriptMessageWho :: Text}
    | MsgSetPartyName {scriptMessageIcon :: Text, scriptMessageWho :: Text, scriptMessageWhat :: Text}
    | MsgIsInTechSharingGroup {scriptMessageWhat :: Text}
    | MsgAddToTechSharingGroup {scriptMessageWhat :: Text}
    | MsgRemovePowerBalance {scriptMessageWhat :: Text}
    | MsgRemoveDynamicMod {scriptMessageWhat :: Text}
    | MsgHasRule {scriptMessage_icon :: Text, scriptMessageWhom :: Text, scriptMessageWhat :: Text}
    | MsgHasCoreOccupationModifier {scriptMessage_icon :: Text, scriptMessageWho :: Text, scriptMessageWhat :: Text}
    | MsgIsPowerBalanceInRange {scriptMessageWho :: Text, scriptMessageWhat :: Text, scriptMessageWhatKey :: Text, scriptMessageAtomKey :: Text, scriptMessageAmt :: Double}
    | MsgHasOffensiveWar {scriptMessageYn :: Bool}
    | MsgIsMajor {scriptMessageYn :: Bool}
    | MsgSendEquipment {scriptMessageAmtText :: Text, scriptMessageWhat :: Text, scriptMessageWhom :: Text, scriptMessageYn :: Bool}
    | MsgSetPopularities
    | MsgRandomListTrigger
    | MsgRandomListModifier {scriptMessageAmt :: Double}
    | MsgRandomListAddModifier {scriptMessageAmt :: Double}
    | MsgUnlockDecisionCategoryTooltip {scriptMessageWhat :: Text}
    | MsgUnlockDecisionTooltip {scriptMessageWhat :: Text, scriptMessageKey :: Text}
    | MsgIsPuppet {scriptMessageYn :: Bool}
    | MsgAddDynamicModifier {scriptMessageWhat :: Text, scriptMessageWho :: Text, scriptMessageDaysText :: Text}
    | MsgIsFactionLeader {scriptMessageYn :: Bool}
    | MsgHasWargoalAgainst {scriptMessageWhom :: Text,scriptMessageWhat :: Text}
    | MsgHasWargoalAgainstType {scriptMessageWhom :: Text, scriptMessageWhat :: Text, scriptMessageWhere :: Text}
    | MsgAddBuildingConstruction {scriptMessageYn :: Bool, scriptMessageIcon :: Text, scriptMessageWhat :: Text, scriptMessageAmt :: Double, scriptMessageProv :: Text}
    | MsgAddBuildingConstructionVar {scriptMessageYn :: Bool, scriptMessageIcon :: Text, scriptMessageWhat :: Text, scriptMessageAmtText :: Text, scriptMessageProv :: Text}
    | MsgSetBuildingLevel {scriptMessageIcon :: Text, scriptMessageWhat :: Text, scriptMessageAmt :: Double, scriptMessageProv :: Text}
    | MsgSetBuildingLevelVar {scriptMessageIcon :: Text, scriptMessageWhat :: Text, scriptMessageAmtText :: Text, scriptMessageProv :: Text}
    | MsgRemoveBuilding {scriptMessageIcon :: Text, scriptMessageWhat :: Text, scriptMessageAmt :: Double}
    | MsgRemoveBuildingVar {scriptMessageIcon :: Text, scriptMessageWhat :: Text, scriptMessageAmtText :: Text}
    | MsgAddProvinceModifier {scriptMessageYn :: Bool, scriptMessageWhat :: Text, scriptMessageProv :: Text}
    | MsgAllProvinces
    | MsgLimitToBorder
    | MsgLimitToCoastal
    | MsgLimitToNavalBase
    | MsgLimitToSupplyNode
    | MsgLimitToBorderCountry {scriptMessageWho :: Text}
    | MsgProvinceLevel {scriptMessageComp :: Text, scriptMessageAmt :: Double}
    | MsgLimitToVictoryPoint {scriptMessageYn :: Bool,scriptMessageComp :: Text, scriptMessageAmt :: Double}

-- | Whether to default to English localization.
useEnglish :: [Text] -> Bool
useEnglish [] = True
useEnglish ("en":_) = True
useEnglish _ = False

instance RenderMessage Script ScriptMessage where
    renderMessage _ (useEnglish -> True) msg = case msg of
        MsgUnprocessed {scriptMessageMsg = _msg}
            -> _msg
        -- scope messages
        -- trigger scope messages
        MsgAllAlliedCountry
            -> "[SCOPE]All allied countries:"
        MsgAllArmyLeader
            -> "[SCOPE]All employed army leaders:"
        MsgAllCharacter
            -> "[SCOPE]All recruited characters:"
        MsgAllControlledState
            -> "[SCOPE]All controlled states:"
        MsgAllCoreState
            -> "[SCOPE]All core states:"
        MsgAllCountry
            -> "[SCOPE]All countries in the world:"
        MsgAllCountryWithOriginalTag {scriptMessageWho = _who}
            -> mconcat
                ["[SCOPE]All countries with the same original tag as "
                , _who
                , ":"
                ]
        MsgAllEnemyCountry
            -> "[SCOPE]All enemy countries:"
        MsgAllGuaranteedCountry
            -> "[SCOPE]All guaranteed countries:"
        MsgAllNavyLeader
            -> "[SCOPE]All employed navy leaders:"
        MsgAllNeighborCountry
            -> "[SCOPE]All neighbouring countries:"
        MsgAllNeighborState
            -> "[SCOPE]All neighbouring states:"
        MsgAllOccupiedCountry
            -> "[SCOPE]All occupied countries:"
        MsgAllOperativeLeader
            -> "[SCOPE]All employed operatives:"
        MsgAllOtherCountry
            -> "[SCOPE]All other countries:"
        MsgAllOwnedState
            -> "[SCOPE]All owned states:"
        MsgAllState
            -> "[SCOPE]All states:"
        MsgAllSubjectCountries
            -> "[SCOPE]All subject countries:"
        MsgAllUnitLeader
            -> "[SCOPE]All employed unit leaders:"
        MsgAnyAlliedCountry
            -> "[SCOPE]Any allied country:"
        MsgAnyArmyLeader
            -> "[SCOPE]Any employed army leader:"
        MsgAnyCharacter
            -> "[SCOPE]Any recruited character:"
        MsgAnyControlledState
            -> "[SCOPE]Any controlled state:"
        MsgAnyCoreState
            -> "[SCOPE]Any core state:"
        MsgAnyCountry
            -> "[SCOPE]Any country in the world:"
        MsgAnyCountryDivision
            -> "[SCOPE]Any division owned:"
        MsgAnyCountryWithCore
            -> "[SCOPE]Any country with core on state:"
        MsgAnyCountryWithOriginalTag {scriptMessageWho = _who}
            -> mconcat
                ["[SCOPE]Any country with the same original tag as "
                , _who
                , ":"
                ]
        MsgAnyEnemyCountry
            -> "[SCOPE]Any enemy country:"
        MsgAnyGuaranteedCountry
            -> "[SCOPE]Any guaranteed country:"
        MsgAnyHomeAreaNeighborCountry
            -> "[SCOPE]Any neighbouring country with direct land connection:"
        MsgAnyNavyLeader
            -> "[SCOPE]Any employed navy leader:"
        MsgAnyNeighborCountry
            -> "[SCOPE]Any neighbouring country:"
        MsgAnyNeighborState
            -> "[SCOPE]Any neighbouring state:"
        MsgAnyOccupiedCountry
            -> "[SCOPE]Any occupied country:"
        MsgAnyOperativeLeader
            -> "[SCOPE]Any employed operative:"
        MsgAnyOtherCountry
            -> "[SCOPE]Any other country:"
        MsgAnyOwnedState
            -> "[SCOPE]Any owned state:"
        MsgAnyState
            -> "[SCOPE]Any state:"
        MsgAnyStateDivision
            -> "[SCOPE]Any Division in the state:"
        MsgAnySubjectCountry
            -> "[SCOPE]Any subject country:"
        MsgAnyUnitLeader
            -> "[SCOPE]Any employed unit leader:"
        -- effect scope messages
        MsgEveryArmyLeader
            -> "[SCOPE]Every employed army leader:"
        MsgEveryCharacter
            -> "[SCOPE]Every recruited character:"
        MsgEveryControlledState
            -> "[SCOPE]Every controlled state:"
        MsgEveryCoreState
            -> "[SCOPE]Every core state:"
        MsgEveryCountry
            -> "[SCOPE]Every country in the world:"
        MsgEveryCountryDivision
            -> "[SCOPE]Every division owned:"
        MsgEveryCountryWithOriginalTag  {scriptMessageWho = _who}
            -> mconcat
                ["[SCOPE]Every country in the world which is or originally was "
                , _who
                , ":"
                ]
        MsgEveryEnemyCountry
            -> "[SCOPE]Every enemy country:"
        MsgEveryNavyLeader
            -> "[SCOPE]Every employed navy leader:"
        MsgEveryNeighborCountry
            -> "[SCOPE]Every neighbouring country:"
        MsgEveryNeighborState
            -> "[SCOPE]Every neighbouring state:"
        MsgEveryOccupiedCountry
            -> "[SCOPE]Every occupied country:"
        MsgEveryOperative
            -> "[SCOPE]Every employed operative:"
        MsgEveryOtherCountry
            -> "[SCOPE]Every other country:"
        MsgEveryOwnedState
            -> "[SCOPE]Every owned state:"
        MsgEveryPossibleCountry
            -> "[SCOPE]Every country that exist and could exist:"
        MsgEveryState
            -> "[SCOPE]Every state:"
        MsgEveryStateDivision
            -> "[SCOPE]Every division in state:"
        MsgEverySubjectCountry
            -> "[SCOPE]Every subject country:"
        MsgEveryUnitLeader
            -> "[SCOPE]Every employed unit leader:"
        MsgGlobalEveryArmyLeader
            -> "[SCOPE]Every employed  army leaderin the world:"
        MsgRandomArmyLeader
            -> "[SCOPE]One random employed army leader:"
        MsgRandomCharacter
            -> "[SCOPE]One random recruited character:"
        MsgRandomControlledState
            -> "[SCOPE]One random controlled state:"
        MsgRandomCoreState
            -> "[SCOPE]One random core state:"
        MsgRandomCountry
            -> "[SCOPE]One random country in the world:"
        MsgRandomCountryDivision
            -> "[SCOPE]One random owned division:"
        MsgRandomCountryWithOriginalTag  {scriptMessageWho = _who}
            -> mconcat
                ["[SCOPE]One random country in the world which is or originally was "
                , _who
                , ":"
                ]
        MsgRandomEnemyCountry
            -> "[SCOPE]One random enemy country:"
        MsgRandomNavyLeader
            -> "[SCOPE]One random employed navy leader:"
        MsgRandomNeighborCountry
            -> "[SCOPE]One random neighbouring country:"
        MsgRandomNeighborState
            -> "[SCOPE]One random neighbouring state:"
        MsgRandomOccupiedCountry
            -> "[SCOPE]One random occupied country:"
        MsgRandomOperative
            -> "[SCOPE]One random employed operative:"
        MsgRandomOtherCountry
            -> "[SCOPE]One random other country:"
        MsgRandomOwnedControlledState
            -> "[SCOPE]One random owned and controlled state:"
        MsgRandomOwnedState
            -> "[SCOPE]One random owned state:"
        MsgRandomState
            -> "[SCOPE]One random state:"
        MsgRandomStateDivision
            -> "[SCOPE]One random division in state:"
        MsgRandomSubjectCountry
            -> "[SCOPE]One random subject country:"
        MsgRandomUnitLeader
            -> "[SCOPE]One random employed unit leader:"
        -- dual scope messages
        MsgROOT
            -> "[SCOPE]ROOT"
        MsgROOTSCOPECountry
            -> "[SCOPE]Our country"
        MsgROOTSCOPEState
            -> "[SCOPE]The currently considered state"
        MsgROOTSCOPECharacter
            -> "[SCOPE]The currently considered character"
        MsgROOTSCOPEOperative
            -> "[SCOPE]The currently considered operative"
        MsgROOTSCOPEUnitLeader
            -> "[SCOPE]The currently considered unit leader"
        MsgROOTCountry
            -> "our country"
        MsgROOTOperative
            -> "the currently considered operative"
        MsgROOTState
            -> "the currently considered state"
        MsgROOTUnitLeader
            -> "the currently considered unit leader"

        MsgPREV
            -> "[SCOPE]PREV"
        MsgPREVPREV
            -> "[SCOPE]PREV.PREV<!-- manually check scope -->"
        MsgPREVPREVPREV
            -> "[SCOPE]PREV.PREV.PREV<!-- manually check scope -->"
        MsgPREVSCOPECharacter
            -> "[SCOPE]The previously mentioned character"
        MsgPREVSCOPECountry
            -> "[SCOPE]Previously mentioned country"
        MsgPREVSCOPEOperative
            -> "[SCOPE]The previously mentioned operative"
        MsgPREVSCOPEState
            -> "[SCOPE]The previously mentioned state"
        MsgPREVSCOPEUnitLeader
            -> "[SCOPE]The previously mentioned unit leader"
        MsgPREVSCOPEFROM
            -> "[SCOPE]The previously mentioned FROM scope"
        MsgPREVSCOPEMisc
            -> "[SCOPE]The previously mentioned var, event_target, array"
        MsgPREVSCOPECustom
            -> "[SCOPE]Previously mentioned Custom Scope<!-- check game script for where it points to -->"
        MsgPREVSCOPECustom2
            -> "[SCOPE]Custom Scope<!-- check game script for where it points to -->"
        MsgPREVCharacter
            -> "the previously mentioned character"
        MsgPREVCountry
            -> "the previously mentioned country"
        MsgPREVDivision
            -> "the previously mentioned division"
        MsgPREVState
            -> "the previously mentioned state"
        MsgPREVStateOwner
            -> "the owner of the previously mentioned state"
        MsgPREVOperative
            -> "the previously mentioned operative"
        MsgPREVUnitLeader
            -> "the previously mentioned unit leader"
        MsgPREVFROM
            -> "previously mentioned FROM scope<!-- check game script for where it points to -->"
        MsgPREVCustom
            -> "previously mentioned custom scope<!-- check game script for where it points to -->"

        MsgTHISCharacter
            -> "this character"
        MsgTHISCountry
            -> "this country"
        MsgTHISDivision
            -> "this division"
        MsgTHISState
            -> "this state"
        MsgTHISOperative
            -> "this operative"
        MsgTHISUnitLeader
            -> "this unit leader"
        MsgTHISCustom
            -> "current custom scope<!-- check game script for where it points to -->"

        MsgFROM
            -> "FROM<!-- check game script for where it points to -->"
        MsgFROMSCOPE
            -> "[SCOPE]FROM<!-- check game script for where it points to -->"
        MsgFROMFROMSCOPE
            -> "[SCOPE]FROM.FROM<!-- check game script for where it points to -->"
        MsgFROMFROMFROMSCOPE
            -> "[SCOPE]FROM.FROM.FROM<!-- check game script for where it points to -->"

        MsgMISC
            -> "MISC (scope of variable, event_target, array)"

        MsgCapitalSCOPE
            -> "[SCOPE]Capital state:"
        MsgCapital
            -> "capital state"
        MsgControllerSCOPE
            -> "[SCOPE]State controller:"
        MsgController
            -> "state controller"
        MsgControllerOf { scriptMessageWhat = _what}
            -> mconcat
                [ "owner of "
                , _what
                ]
        MsgOverlordSCOPE
            -> "[SCOPE]Overlord:"
        MsgOverlord
            -> "overlord"
        MsgOverlordOf { scriptMessageWhat = _what}
            -> mconcat
                [ "overlord of "
                , _what
                ]
        MsgFactionLeaderSCOPE
            -> "[SCOPE]Faction leader:"
        MsgFactionLeader
            -> "faction leader"
        MsgFactionLeaderOf { scriptMessageWhat = _what}
            -> mconcat
                [ "faction leader of faction "
                , _what
                , " is in"
                ]
        MsgOwnerSCOPE
            -> "[SCOPE]State owner/Unit owner:"
        MsgOwnerStateSCOPE
            -> "[SCOPE]State owner:"
        MsgOwnerUnitSCOPE
            -> "[SCOPE]Unit owner:"
        MsgOwnerOfSCOPE { scriptMessageWhat = _what}
            -> mconcat
                [ "[SCOPE]Owner of "
                , _what
                , ":"
                ]
        MsgOwnerState
            -> "state owner"
        MsgOwnerUnit
            -> "unit owner"
        MsgOwner
            -> "state owner/unit owner"
        MsgOwnerOf { scriptMessageWhat = _what}
            -> mconcat
                [ "owner of "
                , _what
                ]
        MsgState {scriptMessageWhere = _where}
            -> mconcat
                [ "[Scope]"
                , _where
                , ":"
                ]
        MsgSCOPEEventTarget {scriptMessageTag = _tag}
            -> mconcat
                [ "[SCOPE]Event target "
                , typewriterText _tag
                , ":"
                ]
        MsgEventTargetVar {scriptMessageTag = _tag}
            -> mconcat
                [ "event target "
                , typewriterText _tag
                ]
        MsgSCOPEVariable {scriptMessageTag = _tag}
            -> mconcat
                [ "[SCOPE]Variable "
                , typewriterText _tag
                , ":"
                ]
        MsgVariable {scriptMessageTag = _tag}
            -> mconcat
                [ "variable "
                , typewriterText _tag
                ]

        -- arrays
        MsgAllOfScopes  {scriptMessageWhat = _what}
            -> mconcat
                ["[SCOPE]All scopes in the array "
                , typewriterText _what
                , ":"
                ]
        MsgAnyOfScopes  {scriptMessageWhat = _what}
            -> mconcat
                ["[SCOPE]Any scope in the array "
                , typewriterText _what
                , ":"
                ]
        MsgForEachScopeLoop  {scriptMessageWhat = _what}
            -> mconcat
                ["[SCOPE]Every scope in the array "
                , typewriterText _what
                , ":"
                ]
        MsgRandomScopeInArray  {scriptMessageWhat = _what}
            -> mconcat
                ["[SCOPE]One random scope in the array "
                , typewriterText _what
                , ":"
                ]

        -- flow control messages
        MsgAnd
            -> "All of the following must be true:"
        MsgNot
            -> "None of:"
        MsgOr
            -> "At least ''one'' of the following is true:"

        MsgCountTriggers {scriptMessageAmt = _amt}
            -> mconcat
                [ "At least "
                , toMessage (bold (plainNumMin _amt))
                , " triggers must be true:"
                ]
        MsgHiddenTriggers
            -> "Hidden trigger:"
        MsgHiddenEffect
            -> "Hidden effect:"
        MsgCustomTriggerTooltip
            -> "Custom trigger tooltip:"

        MsgElse
            -> "Else:"
        MsgElseIf
            -> "Else, if:"
        MsgIf
            -> "If:"
        MsgLimit
            -> "Limited to:"
        MsgPrioritize {scriptMessageWhat = _what}
            -> mconcat
                [ "Prioritizing the "
                , _what
                ]
        MsgOriginalTagToCheck {scriptMessageWho = _who}
            -> mconcat
                [ "originally "
                , _who
                ]
        MsgWhile
            -> "While:"
        MsgFor
            -> "For:"
        MsgRandom
            -> "One of the following at random:"
        MsgRandomList
            -> "One of the following at random:"
        MsgRandomChance {scriptMessageChance = _chance}
            -> mconcat
                [ toMessage (plainPcMin _chance)
                , " chance of:"
                ]
        MsgRandomChanceHOI4 {scriptMessageChance = _chance, scriptMessageAmt = _amt}
            -> mconcat
                [ toMessage (plainPcMin _chance)
                ," (",toMessage (plainNumMin _amt),")"
                , " chance of:"
                ]
        MsgRandomVarChance {scriptMessageWhat = _what}
            -> mconcat
                [ "Based on "
                , _what
                , " chance of:"
                ]
        --unsorted messages
        MsgKillCountryLeader
            -> "Kill the current country leader"
        MsgLeaveFaction
            -> "Leave faction"
        MsgMarkFocusTreeLayoutDirty
            -> "Refresh the focus tree restarting the checks in allow_branch"
        MsgRetire
            -> "Retires"
        MsgRetireCountryLeader
            -> "Retire the current country leader"
        MsgSetLeaderDescription
            -> "<!-- Change in leader description -->"
        MsgSetPortraits
            -> "<!-- Change in portrait -->"
        MsgGainLosePosIcon {scriptMessageIcon = _icon, scriptMessageLoc = _loc, scriptMessageAmt = _amt}
            -> mconcat
                [ gainOrLose _amt
                , " "
                , _icon
                , " "
                , toMessage $ templateColor (colourNum True _amt)
                , " "
                , _loc
                ]
        MsgGainLoseLocIconVar {scriptMessageIcon = _icon, scriptMessageLoc = _loc, scriptMessageAmtText = _amtT}
            -> mconcat
                [ "Gain or Lose "
                , _icon
                , " "
                , typewriterText _amtT
                , " "
                , _loc
                ]
        MsgAddExtraStateSharedBuildingSlots {scriptMessageIcon = _icon, scriptMessageAmt = _amt}
            -> mconcat
                [ addOrRemove _amt
                , " "
                , toMessage $ templateColor (colourNum True _amt)
                , " "
                , _icon
                , " "
                , plural _amt "building slot" "building slots"
                ]
        MsgAddExtraStateSharedBuildingSlotsVar {scriptMessageIcon = _icon, scriptMessageAmtText = _amtT}
            -> mconcat
                [ "Add or Remove "
                , typewriterText _amtT
                , " "
                , _icon
                , " building slots"
                ]
        MsgGainLocPC {scriptMessageIcon = _icon, scriptMessageLoc = _loc, scriptMessageAmt = _amt}
            -> mconcat
                [ gainOrLose _amt
                , " "
                , toMessage $ templateColor (reducedNum (colourPc True) _amt)
                , " "
                , _icon
                , " "
                , _loc
                ]
        MsgCreateFaction {scriptMessageWhat = _what}
            -> mconcat
                [ "Create faction called "
                , toMessage (iquotes _what)
                ]
        MsgHasCountryLeaderWithTrait {scriptMessageWhat = _what}
            -> mconcat
                [ "Has leader with the trait "
                , toMessage (iquotes _what)
                ]
        MsgHasDecision {scriptMessageKey = _key, scriptMessageWhat = _what}
            -> mconcat
                [ "Has selected the decision "
                , toMessage (iquotes _what)
                , "<!-- "
                , _key
                , " -->"
                ]
        MsgHasTech {scriptMessageWhat = _what}
            -> mconcat
                [ "Has "
                , _what
                , " technology researched"
                ]
        MsgHasTemplate {scriptMessageWhat = _what}
            -> mconcat
                [ "Has "
                , toMessage (iquotes _what)
                , " division template"
                ]
        MsgOccupationLaw {scriptMessageWhat = _what}
            -> mconcat
                [ "Current occupation law is "
                , toMessage (iquotes _what)
                ]
        MsgDiplomaticRelation {scriptMessageWhat = _what, scriptMessageWhom = _whom}
            -> mconcat
                [ _what
                , _whom
                ]
        MsgGiveResourceRights {scriptMessageWhere = _where, scriptMessageWho = _who, scriptMessageWhat = _what}
            -> mconcat
                [ "Give "
                , _who
                , " rights to the ", _what ,"resources in "
                ,  _where
                ]
        MsgTrait {scriptMessageYn = _yn}
            -> mconcat
                [ ifThenElseT _yn "Gains" "Loses"
                ]
        MsgTraitIdeo {scriptMessageYn = _yn, scriptMessageWhat = _what}
            -> mconcat
                [ ifThenElseT _yn "Gains" "Loses"
                , " if character's ideology is "
                , _what
                ]
        MsgTraitChar {scriptMessageWho = _who, scriptMessageYn = _yn}
            -> mconcat
                [ _who
                , " "
                , ifThenElseT _yn "gains" "loses"
                ]
        MsgTraitCharIdeo {scriptMessageWho = _who, scriptMessageYn = _yn, scriptMessageWhat = _what}
            -> mconcat
                [ _who
                , " "
                , ifThenElseT _yn "gains" "loses"
                , " if character's ideology is "
                , boldText _what
                ]
        MsgAddCountryLeaderTrait
            -> "Country leader gains trait:"
        MsgRemoveCountryLeaderTrait
            -> "Country leader loses trait:"
        MsgModifyCountryLeaderTrait
            -> "Modify country leader trait:"
        MsgReplaceCountryLeaderTrait {scriptMessageWhat = _what}
            -> mconcat
                [ "Replace country leader trait "
                , boldText _what
                , " with:"
                ]
        MsgAddUnitLeaderTrait
            -> "Unit leader gains trait:"
        MsgRemoveUnitLeaderTrait
            -> "Unit leader loses trait:"
        MsgAddTimedUnitLeaderTrait {scriptMessageWhat = _what, scriptMessageAmt = _amt}
            -> mconcat
                [ "Unit leader gains "
                , toMessage (iquotes _what)
                , " for "
                , formatDays _amt
                ]
        MsgAddTimedUnitLeaderTraitVar {scriptMessageWhat = _what, scriptMessageAmtText = _amtT}
            -> mconcat
                [ "Unit leader gains "
                , toMessage (iquotes _what)
                , " for "
                , typewriterText _amtT
                ]
        MsgHasTrait {scriptMessageWhat = _what}
            -> mconcat
                [ "Has trait "
                , boldText _what
                ]
        MsgAddSkill {scriptMessageWhat = _what, scriptMessageAmt = _amt}
            -> mconcat
                [ "Add "
                , _what
                , " Skill: "
                , toMessage $ templateColor (colourNumSign True _amt)
                ]
        MsgTooltip {scriptMessageWhat = _what}
            -> mconcat
                [ "Tooltip: "
                , _what
                ]
        MsgCustomEffectTooltip {scriptMessageWhat = _what}
            -> mconcat
                [ "Custom effect tooltip: "
                , _what
                ]
        MsgRemoveStateClaim {scriptMessageWhat = _what}
            -> mconcat
                [ "Loses a claim on "
                , _what
                ]
        MsgRemoveStateCore {scriptMessageWhat = _what}
            -> mconcat
                [ "Loses core on "
                , _what
                ]
        MsgSetStateController {scriptMessageWhat = _what}
            -> mconcat
                [ "Becomes controller of "
                , _what
                ]
        MsgSetStateOwner {scriptMessageWhat = _what}
            -> mconcat
                [ "Becomes owner of "
                , _what
                ]
        MsgOwnsState {scriptMessageWhat = _what}
            -> mconcat
                [ "Owns state "
                , _what
                ]
        MsgControlsState {scriptMessageWhat = _what}
            -> mconcat
                [ "Controls state "
                , _what
                ]
        MsgHasFullControlOfState {scriptMessageWhat = _what}
            -> mconcat
                [ "Has full control of state "
                , _what
                ]
        MsgClearFlag {scriptMessageFlagType = _flagType, scriptMessageName = _name, scriptMessageLoc = _loc}
            -> mconcat $ ifThenElse (T.null _loc)
                [ "Clear "
                , _flagType
                , " flag "
                , typewriterText _name
                ]

                [ "Remove: ", _loc , " ({{hover|Clear "
                , _flagType
                , " flag "
                ,  _name --typewriterText
                , "|?}})"
                ]
        MsgHasFlag {scriptMessageFlagType = _flagType, scriptMessageName = _name, scriptMessageLoc = _loc}
            -> mconcat $ ifThenElse (T.null _loc)
                [ toMessage (T.toTitle _flagType)
                , " flag "
                , typewriterText _name
                , " is set"
                ]

                [ _loc , " ({{hover|"
                , toMessage (T.toTitle _flagType)
                , " flag "
                ,  _name --typewriterText
                , " is set"
                , "|?}})"
                ]
        MsgHasFlagFor {scriptMessageFlagType = _flagType, scriptMessageName = _name, scriptMessageAmtText = _amtT, scriptMessageTime = _time, scriptMessageDate = _date, scriptMessageLoc = _loc}
            -> mconcat $ ifThenElse (T.null _loc)
                [ toMessage (T.toTitle _flagType)
                , " flag "
                , typewriterText _name
                , " is set"
                , _amtT
                , _time
                , _date
                ]
                [ _loc
                , _amtT
                , _time
                , _date, " ({{hover|"
                , toMessage (T.toTitle _flagType)
                , " flag "
                , _name
                , " is set"
                , _amtT
                , _time
                , _date
                , "|?}})"
                ]
        MsgSetFlag {scriptMessageFlagType = _flagType, scriptMessageName = _name, scriptMessageLoc = _loc}
            -> mconcat $ ifThenElse (T.null _loc)
                [ "Set "
                , _flagType
                , " flag "
                , typewriterText _name
                ]

                [ _loc , " ({{hover|"
                , "Set "
                , _flagType
                , " flag "
                , _name --typewriterText
                , "|?}})"
                ]
        MsgSetFlagFor {scriptMessageFlagType = _flagType, scriptMessageName = _name, scriptMessageAmtText = _amtT, scriptMessageDaysText = _days, scriptMessageLoc = _loc}
            -> mconcat $ ifThenElse (T.null _loc)
                [ "Set "
                , _flagType
                , " flag "
                , typewriterText _name
                , _amtT
                , _days
                , ifThenElseT (T.null _loc) "" ("<!-- loc: " <> _loc <> " -->")
                ]

                [ _loc
                , _amtT
                , _days, " ({{hover|"
                , "Set "
                , _flagType
                , " flag "
                , _name --typewriterText
                , _amtT
                , _days
                , "|?}})"
                ]
        MsgHadFlag {scriptMessageFlagType = _flagType, scriptMessageName = _name, scriptMessageDays = _days, scriptMessageLoc = _loc}
            -> mconcat $ ifThenElse (T.null _loc)
                [ "Has had "
                , _flagType
                , " flag "
                , typewriterText _name
                , " for "
                , toMessage (formatDays _days)
                ]

                [ "Has had '''"
                , _loc, "''' for "
                , toMessage (formatDays _days)
                , " ({{hover|Has had "
                , _flagType
                , " flag "
                , _name
                , " for "
                , toMessage (formatDays _days)
                , "|?}})"
                ]
        MsgModifyFlag {scriptMessageFlagType = _flagType, scriptMessageFlag = _flag, scriptMessageAmt = _amt, scriptMessageLoc = _loc}
            -> mconcat $ ifThenElse (T.null _loc)
                [ "Modify "
                , _flagType
                , " flag "
                , typewriterText _flag
                , " by "
                , toMessage (plainNumSign _amt)
                ]

                [ "Modify '''"
                , _loc, "''' by "
                , toMessage (plainNumSign _amt)
                , " ({{hover|Modify "
                , _flagType
                , " flag "
                , _flag
                , " by "
                , toMessage (plainNumSign _amt)
                , "|?}})"
                ]
        MsgModifyFlagVar {scriptMessageFlagType = _flagType, scriptMessageFlag = _flag, scriptMessageAmtText = _amtT, scriptMessageLoc = _loc}
            -> mconcat $ ifThenElse (T.null _loc)
                [ "Modify "
                , _flagType
                , " flag "
                , typewriterText _flag
                , " by "
                , typewriterText _amtT
                ]

                [ "Modify '''"
                , _loc, "''' by "
                , typewriterText _amtT
                , " ({{hover|Modify "
                , _flagType
                , " flag "
                , _flag
                , " by "
                , _amtT
                , "|?}})"
                ]
        MsgCharacterFlag
            -> "character"
        MsgCountryFlag
            -> "country"
        MsgGlobalFlag
            -> "global"
        MsgStateFlag
            -> "state"
        MsgUnitLeaderFlag
            -> "unit leader"
        MsgHasAddedTensionAmount {scriptMessageAmt = _amt, scriptMessageCompare = _comp}
            -> mconcat
                [ "Has caused "
                , _comp
                , " "
                , toMessage (bold (plainNumMin _amt))
                , " {{icon|world tension|1}}"
                ]
        MsgHasAddedTensionAmountVar {scriptMessageAmtText = _amtT, scriptMessageCompare = _comp}
            -> mconcat
                [ "Has caused "
                , _comp
                , " "
                , typewriterText _amtT
                , " {{icon|world tension|1}}"
                ]
        MsgHasAirExperience {scriptMessageAmt = _amt, scriptMessageCompare = _comp}
            -> mconcat
                [ "Has "
                , _comp
                , " "
                , toMessage (bold (plainNumMin _amt))
                , " {{icon|air exp|1}}"
                ]
        MsgHasAirExperienceVar {scriptMessageAmtText = _amtT, scriptMessageCompare = _comp}
            -> mconcat
                [ "Has "
                , _comp
                , " "
                , typewriterText _amtT
                , " {{icon|air exp|1}}"
                ]
        MsgHasArmyExperience {scriptMessageAmt = _amt, scriptMessageCompare = _comp}
            -> mconcat
                [ "Has "
                , _comp
                , " "
                , toMessage (bold (plainNumMin _amt))
                , " {{icon|army exp|1}}"
                ]
        MsgHasArmyExperienceVar {scriptMessageAmtText = _amtT, scriptMessageCompare = _comp}
            -> mconcat
                [ "Has "
                , _comp
                , " "
                , typewriterText _amtT
                , " {{icon|army exp|1}}"
                ]
        MsgHasBombingWarSupport {scriptMessageAmt = _amt, scriptMessageCompare = _comp}
            -> mconcat
                [ "Has "
                , _comp
                , " "
                , toMessage (bold (reducedNum plainPcMin _amt))
                , " {{icon|war support|1}} malus from bombing"
                ]
        MsgHasBombingWarSupportVar {scriptMessageAmtText = _amtT, scriptMessageCompare = _comp}
            -> mconcat
                [ "Has "
                , _comp
                , " "
                , typewriterText _amtT
                , " {{icon|war support|1}} malus from bombing"
                ]
        MsgHasCasualtiesWarSupport {scriptMessageAmt = _amt, scriptMessageCompare = _comp}
            -> mconcat
                [ "Has "
                , _comp
                , " "
                , toMessage (bold (reducedNum plainPcMin _amt))
                , " {{icon|war support|1}} malus from casualties"
                ]
        MsgHasCasualtiesWarSupportVar {scriptMessageAmtText = _amtT, scriptMessageCompare = _comp}
            -> mconcat
                [ "Has "
                , _comp
                , " "
                , typewriterText _amtT
                , " {{icon|war support|1}} malus from casualties"
                ]
        MsgHasConvoysWarSupport {scriptMessageAmt = _amt, scriptMessageCompare = _comp}
            -> mconcat
                [ "Has "
                , _comp
                , " "
                , toMessage (bold (reducedNum plainPcMin _amt))
                , " {{icon|war support|1}} malus from sunk convoys"
                ]
        MsgHasConvoysWarSupportVar {scriptMessageAmtText = _amtT, scriptMessageCompare = _comp}
            -> mconcat
                [ "Has "
                , _comp
                , " "
                , typewriterText _amtT
                , " {{icon|war support|1}} malus from sunk convoys"
                ]
        MsgHasEquipment {scriptMessageCompare = _comp, scriptMessageAmt = _amt, scriptMessageWhat = _what}
            -> mconcat
                [ _comp
                , " "
                , toMessage (bold (plainNumMin _amt))
                , " of type "
                , _what
                , " stored in stockpile"
                ]
        MsgHasEquipmentVar {scriptMessageCompare = _comp, scriptMessageAmtText = _amtT, scriptMessageWhat = _what}
            -> mconcat
                [ _comp
                , " "
                , typewriterText _amtT
                , " of type "
                , _what
                , " stored in stockpile"
                ]
        MsgHasNavyExperience {scriptMessageAmt = _amt, scriptMessageCompare = _comp}
            -> mconcat
                [ "Has "
                , _comp
                , " "
                , toMessage (bold (plainNumMin _amt))
                , " {{icon|navy exp|1}}"
                ]
        MsgHasNavyExperienceVar {scriptMessageAmtText = _amtT, scriptMessageCompare = _comp}
            -> mconcat
                [ "Has "
                , _comp
                , " "
                , typewriterText _amtT
                , " {{icon|navy exp|1}}"
                ]
        MsgHasArmyManpower {scriptMessageAmt = _amt, scriptMessageCompare = _comp}
            -> mconcat
                [ "Has "
                , _comp
                , " "
                , toMessage (bold (plainNumMin _amt))
                , " {{icon|manpower|1}} in the field"
                ]
        MsgHasArmyManpowerVar {scriptMessageAmtText = _amtT, scriptMessageCompare = _comp}
            -> mconcat
                [ "Has "
                , _comp
                , " "
                , typewriterText _amtT
                , " {{icon|manpower|1}} in the field"
                ]
        MsgHasLegitimacy {scriptMessageAmt = _amt, scriptMessageCompare = _comp}
            -> mconcat
                [ "Has "
                , _comp
                , " "
                , toMessage (bold (plainNumMin _amt))
                , " legitimacy"
                ]
        MsgHasLegitimacyVar {scriptMessageAmtText = _amtT, scriptMessageCompare = _comp}
            -> mconcat
                [ "Has "
                , _comp
                , " "
                , typewriterText _amtT
                , " legitimacy"
                ]
        MsgHasManpower {scriptMessageAmt = _amt, scriptMessageCompare = _comp}
            -> mconcat
                [ "Has "
                , _comp
                , " "
                , toMessage (bold (plainNumMin _amt))
                , " {{icon|manpower|1}}"
                ]
        MsgHasManpowerVar {scriptMessageAmtText = _amtT, scriptMessageCompare = _comp}
            -> mconcat
                [ "Has "
                , _comp
                , " "
                , typewriterText _amtT
                , " {{icon|manpower|1}}"
                ]
        MsgHasPoliticalPower {scriptMessageAmt = _amt, scriptMessageCompare = _comp}
            -> mconcat
                [ "Has "
                , _comp
                , " "
                , toMessage (bold (plainNumMin _amt))
                , " {{icon|political power|1}}"
                ]
        MsgHasPoliticalPowerVar {scriptMessageAmtText = _amtT, scriptMessageCompare = _comp}
            -> mconcat
                [ "Has "
                , _comp
                , " "
                , typewriterText _amtT
                , " {{icon|political power|1}}"
                ]
        MsgPoliticalPowerDaily {scriptMessageAmt = _amt, scriptMessageCompare = _comp}
            -> mconcat
                [ "Gains "
                , _comp
                , " "
                , toMessage (bold (plainNumMin _amt))
                , " {{icon|political power|1}} daily"
                ]
        MsgPoliticalPowerDailyVar {scriptMessageAmtText = _amtT, scriptMessageCompare = _comp}
            -> mconcat
                [ "Gains "
                , _comp
                , " "
                , typewriterText _amtT
                , " {{icon|political power|1}} daily"
                ]
        MsgHasStability {scriptMessageAmt = _amt, scriptMessageCompare = _comp}
            -> mconcat
                [ "Has "
                , _comp
                , " "
                , toMessage (bold (reducedNum plainPcMin _amt))
                , " {{icon|stability|1}}"
                ]
        MsgHasStabilityVar {scriptMessageAmtText = _amtT, scriptMessageCompare = _comp}
            -> mconcat
                [ "Has "
                , _comp
                , " "
                , typewriterText _amtT
                , " {{icon|stability|1}}"
                ]
        MsgHasWarSupport {scriptMessageAmt = _amt, scriptMessageCompare = _comp}
            -> mconcat
                [ "Has "
                , _comp
                , " "
                , toMessage (bold (reducedNum plainPcMin _amt))
                , " {{icon|war support|1}}"
                ]
        MsgHasWarSupportVar {scriptMessageAmtText = _amtT, scriptMessageCompare = _comp}
            -> mconcat
                [ "Has "
                , _comp
                , " "
                , typewriterText _amtT
                , " {{icon|war support|1}}"
                ]
        MsgIndustrialComplex {scriptMessageAmt = _amt, scriptMessageCompare = _comp}
            -> mconcat
                [ "Has "
                , _comp
                , " "
                , toMessage (bold (plainNumMin _amt))
                , " {{icon|cic|1}}"
                ]
        MsgIndustrialComplexVar {scriptMessageAmtText = _amtT, scriptMessageCompare = _comp}
            -> mconcat
                [ "Has "
                , _comp
                , " "
                , typewriterText _amtT
                , " {{icon|cic|1}}"
                ]
        MsgInfrastructure {scriptMessageAmt = _amt, scriptMessageCompare = _comp}
            -> mconcat
                [ "Has "
                , _comp
                , " "
                , toMessage (bold (plainNumMin _amt))
                , " {{icon|infrastructure|1}}"
                ]
        MsgInfrastructureVar {scriptMessageAmtText = _amtT, scriptMessageCompare = _comp}
            -> mconcat
                [ "Has "
                , _comp
                , " "
                , typewriterText _amtT
                , " {{icon|infrastructure|1}}"
                ]
        MsgNuclearReactor {scriptMessageAmt = _amt, scriptMessageCompare = _comp}
            -> mconcat
                [ "Has "
                , _comp
                , " "
                , toMessage (bold (plainNumMin _amt))
                , " {{icon|reactor|1}}"
                ]
        MsgNuclearReactorVar {scriptMessageAmtText = _amtT, scriptMessageCompare = _comp}
            -> mconcat
                [ "Has "
                , _comp
                , " "
                , typewriterText _amtT
                , " {{icon|reactor|1}}"
                ]
        MsgNumOfControlledFactories {scriptMessageAmt = _amt, scriptMessageCompare = _comp}
            -> mconcat
                [ "Has "
                , _comp
                , " "
                , toMessage (bold (plainNumMin _amt))
                , plural _amt " controlled factory" " controlled factories"
                ]
        MsgNumOfControlledFactoriesVar {scriptMessageAmtText = _amtT, scriptMessageCompare = _comp}
            -> mconcat
                [ "Has "
                , _comp
                , " "
                , typewriterText _amtT
                , " controlled factories"
                ]
        MsgNumOfControlledStates {scriptMessageAmt = _amt, scriptMessageCompare = _comp}
            -> mconcat
                [ "Has "
                , _comp
                , " "
                , toMessage (bold (plainNumMin _amt))
                , plural _amt " controlled state" " controlled states"
                ]
        MsgNumOfControlledStatesVar {scriptMessageAmtText = _amtT, scriptMessageCompare = _comp}
            -> mconcat
                [ "Has "
                , _comp
                , " "
                , typewriterText _amtT
                , " controlled states"
                ]
        MsgNumOfCivilianFactories {scriptMessageAmt = _amt, scriptMessageCompare = _comp}
            -> mconcat
                [ "Has "
                , _comp
                , " "
                , toMessage (bold (plainNumMin _amt))
                , " {{icon|cic|1}}"
                ]
        MsgNumOfCivilianFactoriesVar {scriptMessageAmtText = _amtT, scriptMessageCompare = _comp}
            -> mconcat
                [ "Has "
                , _comp
                , " "
                , typewriterText _amtT
                , " {{icon|cic|1}}"
                ]
        MsgNumOfAvailableCivilianFactories {scriptMessageAmt = _amt, scriptMessageCompare = _comp}
            -> mconcat
                [ "Has "
                , _comp
                , " "
                , toMessage (bold (plainNumMin _amt))
                , " {{icon|cic|1}} available"
                ]
        MsgNumOfAvailableCivilianFactoriesVar {scriptMessageAmtText = _amtT, scriptMessageCompare = _comp}
            -> mconcat
                [ "Has "
                , _comp
                , " "
                , typewriterText _amtT
                , " {{icon|cic|1}} available"
                ]
        MsgNumOfProjectFactories {scriptMessageAmt = _amt, scriptMessageCompare = _comp}
            -> mconcat
                [ "Has "
                , _comp
                , " "
                , toMessage (bold (plainNumMin _amt))
                , " {{icon|cic|1}} that can be used for projects"
                ]
        MsgNumOfProjectFactoriesVar {scriptMessageAmtText = _amtT, scriptMessageCompare = _comp}
            -> mconcat
                [ "Has "
                , _comp
                , " "
                , typewriterText _amtT
                , " {{icon|cic|1}} that can be used for projects"
                ]
        MsgNumOfFactories {scriptMessageAmt = _amt, scriptMessageCompare = _comp}
            -> mconcat
                [ "Has "
                , _comp
                , " "
                , toMessage (bold (plainNumMin _amt))
                , plural _amt " factory" " factories"
                ]
        MsgNumOfFactoriesVar {scriptMessageAmtText = _amtT, scriptMessageCompare = _comp}
            -> mconcat
                [ "Has "
                , _comp
                , " "
                , typewriterText _amtT
                , " factories"
                ]
        MsgNumOfMilitaryFactories {scriptMessageAmt = _amt, scriptMessageCompare = _comp}
            -> mconcat
                [ "Has "
                , _comp
                , " "
                , toMessage (bold (plainNumMin _amt))
                , " Military"
                , plural _amt " factory" " factories"
                ]
        MsgNumOfMilitaryFactoriesVar {scriptMessageAmtText = _amtT, scriptMessageCompare = _comp}
            -> mconcat
                [ "Has "
                , _comp
                , " "
                , typewriterText _amtT
                , " Military factories"
                ]
        MsgNumOfNavalFactories {scriptMessageAmt = _amt, scriptMessageCompare = _comp}
            -> mconcat
                [ "Has "
                , _comp
                , " "
                , toMessage (bold (plainNumMin _amt))
                , "{{icon|nic}}"
                , plural _amt " Naval Dockyard" " Naval Dockyards"
                ]
        MsgNumOfNavalFactoriesVar {scriptMessageAmtText = _amtT, scriptMessageCompare = _comp}
            -> mconcat
                [ "Has "
                , _comp
                , " "
                , typewriterText _amtT
                , " {{icon|nic}} Naval Dockyards"
                ]
        MsgNumOfNukes {scriptMessageAmt = _amt, scriptMessageCompare = _comp}
            -> mconcat
                [ "Has "
                , _comp
                , " "
                , toMessage (bold (plainNumMin _amt))
                , plural _amt " nuke" " nukes"
                ]
        MsgNumOfNukesVar {scriptMessageAmtText = _amtT, scriptMessageCompare = _comp}
            -> mconcat
                [ "Has "
                , _comp
                , " "
                , typewriterText _amtT
                , " nukes"
                ]
        MsgNumOfOperatives {scriptMessageAmt = _amt, scriptMessageCompare = _comp}
            -> mconcat
                [ "Has "
                , _comp
                , " "
                , toMessage (bold (plainNumMin _amt))
                , plural _amt " operative" " operatives"
                ]
        MsgNumOfOperativesVar {scriptMessageAmtText = _amtT, scriptMessageCompare = _comp}
            -> mconcat
                [ "Has "
                , _comp
                , " "
                , typewriterText _amtT
                , " operatives"
                ]
        MsgNumSubjects {scriptMessageAmt = _amt, scriptMessageCompare = _comp}
            -> mconcat
                [ "Has "
                , _comp
                , " "
                , toMessage (bold (plainNumMin _amt))
                , plural _amt " Subject nation" " Subject nations"
                ]
        MsgNumSubjectsVar {scriptMessageAmtText = _amtT, scriptMessageCompare = _comp}
            -> mconcat
                [ "Has "
                , _comp
                , " "
                , typewriterText _amtT
                , " Subject nations"
                ]
        MsgOriginalResearchSlots {scriptMessageAmt = _amt, scriptMessageCompare = _comp}
            -> mconcat
                [ "Starts with "
                , _comp
                , " "
                , toMessage (bold (plainNumMin _amt))
                , plural _amt " research slot" " research slots"
                ]
        MsgOriginalResearchSlotsVar {scriptMessageAmtText = _amtT, scriptMessageCompare = _comp}
            -> mconcat
                [ "Starts with "
                , _comp
                , " "
                , typewriterText _amtT
                , " research slots"
                ]
        MsgStatePopulation {scriptMessageAmt = _amt, scriptMessageCompare = _comp}
            -> mconcat
                [ "Has "
                , _comp
                , " "
                , toMessage (bold (plainNumMin _amt))
                , " state {{icon|pop|1}}"
                ]
        MsgStatePopulationVar {scriptMessageAmtText = _amtT, scriptMessageCompare = _comp}
            -> mconcat
                [ "Has "
                , _comp
                , " "
                , typewriterText _amtT
                , " state {{icon|pop|1}}"
                ]
        -- withflag/simpleflag messages
        MsgAddClaimBy {scriptMessageWho = _who, scriptMessageWhat = _what}
            -> mconcat
                [ "Is claimed by "
                , _who
                , ifThenElseT (T.null _what) "" "<!-- ",_what," -->"
               ]
        MsgAddCoreOf {scriptMessageWho = _who, scriptMessageWhat = _what}
            -> mconcat
                [ _who
                , " gains a core on this state"
                ]
        MsgAddNationality {scriptMessageWho = _who, scriptMessageWhat = _what}
            -> mconcat
                [ "Operative gains "
                , _who
                , ifThenElseT (T.null _what) "" "<!-- ",_what," -->"
                , " nationality"
                ]
        MsgAddToFaction {scriptMessageWhom = _whom, scriptMessageWhat = _what}
            -> mconcat
                [ "Add "
                , _whom
                , ifThenElseT (T.null _what) "" "<!-- ",_what," -->"
                , " to the current scope's faction"
                ]
        MsgChangeTagFrom {scriptMessageWho = _who, scriptMessageWhat = _what}
            -> mconcat
                [ "Country becomes "
                , _who
                , ifThenElseT (T.null _what) "" "<!-- ",_what," -->"
               ]
        MsgCountryExists {scriptMessageWho = _who, scriptMessageWhat = _what}
            -> mconcat
                [ _who
                , " exists"
                ]
        MsgHasDefensiveWarWith {scriptMessageWhom = _whom, scriptMessageWhat = _what}
            -> mconcat
                [ "Is defending in a war against "
                , _whom
                , ifThenElseT (T.null _what) "" "<!-- ",_what," -->"
                ]
        MsgGiveGuarantee {scriptMessageWhom = _whom, scriptMessageWhat = _what}
            -> mconcat
                [ "Grants guarantee of independence for "
                , _whom
                , ifThenElseT (T.null _what) "" "<!-- ",_what," -->"
                ]
        MsgGiveMilitaryAccess {scriptMessageWhom = _whom, scriptMessageWhat = _what}
            -> mconcat
                [ "Give military access to "
                , _whom
                , ifThenElseT (T.null _what) "" "<!-- ",_what," -->"
                ]
        MsgHasAttacheFrom {scriptMessageWhom = _whom, scriptMessageWhat = _what}
            -> mconcat
                [ "Has attache from "
                , _whom
                , ifThenElseT (T.null _what) "" "<!-- ",_what," -->"
                ]
        MsgHasBorderWarWith {scriptMessageWhom = _whom, scriptMessageWhat = _what}
            -> mconcat
                [ "Has border war with "
                , _whom
                , ifThenElseT (T.null _what) "" "<!-- ",_what," -->"
                ]
        MsgHasGuaranteed {scriptMessageWhom = _whom, scriptMessageWhat = _what}
            -> mconcat
                [ "Has guaranteed "
                , _whom
                , ifThenElseT (T.null _what) "" "<!-- ",_what," -->"
                ]
        MsgHasMilitaryAccessTo {scriptMessageWhom = _whom, scriptMessageWhat = _what}
            -> mconcat
                [ "Has military access to "
                , _whom
                , ifThenElseT (T.null _what) "" "<!-- ",_what," -->"
                ]
        MsgHasNonAggressionPactWith {scriptMessageWhom = _whom, scriptMessageWhat = _what}
            -> mconcat
                [ "Has a {{icon|nap|1}} with "
                , _whom
                , ifThenElseT (T.null _what) "" "<!-- ",_what," -->"
                ]
        MsgHasOffensiveWarWith {scriptMessageWhom = _whom, scriptMessageWhat = _what}
            -> mconcat
                [ "Is in a offensive war against "
                , _whom
                , ifThenElseT (T.null _what) "" "<!-- ",_what," -->"
                ]
        MsgHasSubject {scriptMessageWhom = _whom, scriptMessageWhat = _what}
            -> mconcat
                [ "Has "
                , _whom
                , ifThenElseT (T.null _what) "" "<!-- ",_what," -->"
                , " as a subject nation"
                ]
        MsgOccupiedCountryTag {scriptMessageWhom = _whom, scriptMessageWhat = _what}
            -> mconcat
                [ "Occupied country is "
                , _whom
                , ifThenElseT (T.null _what) "" "<!-- ",_what," -->"
                ]
        MsgInheritTechnology {scriptMessageWhom = _whom, scriptMessageWhat = _what}
            -> mconcat
                [ "Gain the same technologies as "
                , _whom
                , ifThenElseT (T.null _what) "" "<!-- ",_what," -->"
                ]
        MsgIsAllyWith {scriptMessageWhom = _whom, scriptMessageWhat = _what}
            -> mconcat
                [ "Is ally of "
                , _whom
                , ifThenElseT (T.null _what) "" "<!-- ",_what," -->"
                ]
        MsgIsControlledBy {scriptMessageWhom = _whom, scriptMessageWhat = _what}
            -> mconcat
                [ "Is controlled by "
                , _whom
                , ifThenElseT (T.null _what) "" "<!-- ",_what," -->"
                ]
        MsgIsExiledIn { scriptMessageWho = _who, scriptMessageWhat = _what }
            -> mconcat
                [ "Is exiled in "
                , _who
                , ifThenElseT (T.null _what) "" "<!-- ",_what," -->"
               ]
        MsgIsFullyControlledBy { scriptMessageWho = _who, scriptMessageWhat = _what }
            -> mconcat
                [ "Is fully controlled by "
                , _who
                , ifThenElseT (T.null _what) "" "<!-- ",_what," -->"
               ]
        MsgIsGuaranteedBy { scriptMessageWho = _who, scriptMessageWhat = _what }
            -> mconcat
                [ "Is guaranteed independence by "
                , _who
                , ifThenElseT (T.null _what) "" "<!-- ",_what," -->"
               ]
        MsgIsHostingExile { scriptMessageWho = _who, scriptMessageWhat = _what }
            -> mconcat
                [ "Is hosting "
                , _who
                , ifThenElseT (T.null _what) "" "<!-- ",_what," -->"
               ]
        MsgIsInFactionWith {scriptMessageWhom = _whom, scriptMessageWhat = _what}
            -> mconcat
                [ "Is in the same faction as "
                , _whom
                , ifThenElseT (T.null _what) "" "<!-- ",_what," -->"
                ]
        MsgIsJustifyingWargoalAgainst {scriptMessageWhom = _whom, scriptMessageWhat = _what}
            -> mconcat
                [ "Is justifying a {{icon|war goal|1}} against "
                , _whom
                , ifThenElseT (T.null _what) "" "<!-- ",_what," -->"
                ]
        MsgIsNeighborOf {scriptMessageWhom = _whom, scriptMessageWhat = _what}
            -> mconcat
                [ "Is neighbor of "
                , _whom
                , ifThenElseT (T.null _what) "" "<!-- ",_what," -->"
                ]
        MsgIsOwnedAndControlledBy {scriptMessageWhom = _whom, scriptMessageWhat = _what}
            -> mconcat
                [ "Is owned and controlled by "
                , _whom
                , ifThenElseT (T.null _what) "" "<!-- ",_what," -->"
                ]
        MsgIsPuppetOf {scriptMessageWhom = _whom, scriptMessageWhat = _what}
            -> mconcat
                [ "Is a subject of "
                , _whom
                , ifThenElseT (T.null _what) "" "<!-- ",_what," -->"
                ]
        MsgIsClaimedBy {scriptMessageWhom = _whom, scriptMessageWhat = _what}
            -> mconcat
                [ "Is claimed by "
                , _whom
                , ifThenElseT (T.null _what) "" "<!-- ",_what," -->"
                ]
        MsgIsStateCore {scriptMessageWhom = _whom, scriptMessageWhat = _what}
            -> mconcat
                [ "Is a core state of "
                , _whom
                , ifThenElseT (T.null _what) "" "<!-- ",_what," -->"
                ]
        MsgIsSubjectOf {scriptMessageWhom = _whom, scriptMessageWhat = _what}
            -> mconcat
                [ "Is a subject of "
                , _whom
                , ifThenElseT (T.null _what) "" "<!-- ",_what," -->"
                ]
        MsgIsOwnedBy {scriptMessageWhom = _whom, scriptMessageWhat = _what}
            -> mconcat
                [ "State is owned by "
                , _whom
                , ifThenElseT (T.null _what) "" "<!-- ",_what," -->"
                ]
        MsgPuppet {scriptMessageWhom = _whom, scriptMessageWhat = _what}
            -> mconcat
                [ _whom
                , " becomes a puppet of the current scope"
                ]
        MsgRecallVolunteersFrom {scriptMessageWhom = _whom, scriptMessageWhat = _what}
            -> mconcat
                [ "Recall all volunteer forces from "
                , _whom
                , ifThenElseT (T.null _what) "" "<!-- ",_what," -->"
                ]
        MsgRelease {scriptMessageWhom = _whom, scriptMessageWhat = _what}
            -> mconcat
                [ "Release "
                , _whom
                , ifThenElseT (T.null _what) "" "<!-- ",_what," -->"
                ]
        MsgReleasePuppet {scriptMessageWhom = _whom, scriptMessageWhat = _what}
            -> mconcat
                [ "Release "
                , _whom
                , ifThenElseT (T.null _what) "" "<!-- ",_what," -->"
                , " as a puppet"
                ]
        MsgRemoveClaimBy {scriptMessageWho = _who, scriptMessageWhat = _what}
            -> mconcat
                [ "Claim lost by"
                ,  _who
                , ifThenElseT (T.null _what) "" "<!-- ",_what," -->"
                ]
        MsgRemoveCoreOf {scriptMessageWho = _who, scriptMessageWhat = _what}
            -> mconcat
                [ "Remove the core of "
                , _who
                , ifThenElseT (T.null _what) "" "<!-- ",_what," -->"
               ]
        MsgRemoveFromFaction {scriptMessageWho = _who, scriptMessageWhat = _what}
            -> mconcat
                [ "Remove "
                , _who
                , ifThenElseT (T.null _what) "" "<!-- ",_what," -->"
                , " from faction led by current scope"
                ]
        MsgSetStateControllerTo {scriptMessageWho = _who, scriptMessageWhat = _what}
            -> mconcat
                [ "Becomes controlled by "
                , _who
                , ifThenElseT (T.null _what) "" "<!-- ",_what," -->"
               ]
        MsgCountryIs {scriptMessageWho = _who, scriptMessageWhat = _what}
            -> mconcat
                [ "Is "
                , _who
                , ifThenElseT (T.null _what) "" "<!-- ",_what," -->"
               ]
        MsgTransferStateTo {scriptMessageWho = _who, scriptMessageWhat = _what}
            -> mconcat
                [ "Becomes owned and controlled by "
                , _who
                , ifThenElseT (T.null _what) "" "<!-- ",_what," -->"
               ]
        MsgHasWarWith {scriptMessageWhom = _whom, scriptMessageWhat = _what}
            -> mconcat
                [ "Is at war with "
                , _whom
                , ifThenElseT (T.null _what) "" "<!-- ",_what," -->"
                ]
        MsgHasWarTogetherWith {scriptMessageWhom = _whom, scriptMessageWhat = _what}
            -> mconcat
                [ "Fighting war on same side as "
                , _whom
                , ifThenElseT (T.null _what) "" "<!-- ",_what," -->"
                ]
        MsgOriginalTag {scriptMessageWhom = _whom, scriptMessageWhat = _what}
            -> mconcat
                [ "Original country is "
                , _whom
                , ifThenElseT (T.null _what) "" "<!-- ",_what," -->"
                ]
        MsgMakeWhitePeace {scriptMessageWhom = _whom, scriptMessageWhat = _what}
            -> mconcat
                [ "Make a white peace with "
                , _whom
                , ifThenElseT (T.null _what) "" "<!-- ",_what," -->"
                ]
        -- flagyesno messages
        MsgCountryStartResistance {scriptMessageWho = _who, scriptMessageWhat = _what}
            -> mconcat
                [ "Initialize Resistance Activity by "
                , _who
                , ifThenElseT (T.null _what) "" "<!-- ",_what," -->"
                ]
        MsgStartResistance {scriptMessageYn = _yn}
            ->  mconcat
                [ ifThenElseT _yn "Initialize" "Disable"
                , " Resistance Activity"
                ]
        -- other unsorted messages
        MsgAddStateClaim {scriptMessageWhat = _what}
            -> mconcat
                [ "Gains claim on "
                , _what
                ]
        MsgAddStateCore {scriptMessageWhat = _what}
            -> mconcat
                [ "Gains core on "
                , _what
                ]
        MsgExists {scriptMessageYn = _yn}
            -> toMessage (ifThenElseT _yn "Exists" "Does ''not'' exist")
        MsgIsAIControlled {scriptMessageYn = _yn}
            -> mconcat
                [ "Is "
                , toMessage (ifThenElseT _yn "AI" "player")
                , "-controlled"
                ]
        MsgHasAttache {scriptMessageYn = _yn}
            -> mconcat
                [ toMessage (ifThenElseT _yn "Has" "Has ''no''")
                , " Attache from another country"
                ]
        MsgHasBorderWar {scriptMessageYn = _yn}
            -> mconcat
                [ "Is"
                , toMessage (ifThenElseT _yn " " " ''not'' ")
                , "in a border war"
                ]
        MsgHasCapitulated {scriptMessageYn = _yn}
            -> mconcat
                [ toMessage (ifThenElseT _yn "Has" "Has ''not''")
                , " capitulated"
                ]
        MsgIsInFaction {scriptMessageYn = _yn}
            -> mconcat
                [ "Is"
                , toMessage (ifThenElseT _yn "" " ''not''")
                , " in a faction"
                ]
        MsgIsInHomeArea {scriptMessageYn = _yn}
            -> mconcat
                [ toMessage (ifThenElseT _yn "Has" "Does ''not'' have")
                , " a direct land connection to the owner's capital"
                ]
        MsgHasWar {scriptMessageYn = _yn}
            -> mconcat
                [ "Is "
                , toMessage (ifThenElseT _yn "at war" "at peace")
                ]
        MsgIsCapital {scriptMessageYn = _yn}
            -> mconcat
                [ "Is"
                , toMessage (ifThenElseT _yn "" " ''not''")
                , " the country's capital"
                ]
        MsgIsCoastal {scriptMessageYn = _yn}
            -> mconcat
                [ "Is"
                , toMessage (ifThenElseT _yn "" " ''not''")
                , " a coastal state"
                ]
        MsgIsCountryLeader {scriptMessageYn = _yn}
            -> mconcat
                [ "Is"
                , toMessage (ifThenElseT _yn "" " ''not''")
                , " the country leader"
                ]
        MsgIsFemale {scriptMessageYn = _yn}
            -> mconcat
                [ "Character is "
                , toMessage (ifThenElseT _yn "female" "male")
                ]
        MsgIsFemaleLeader {scriptMessageYn = _yn}
            -> mconcat
                [ "Country leader is "
                , toMessage (ifThenElseT _yn "female" "male")
                ]
        MsgIsGovernmentInExile {scriptMessageYn = _yn}
            -> mconcat
                [ ifThenElseT _yn "Is" "Not"
                , " a Government in Exile"
                ]
        MsgIsSubject {scriptMessageYn = _yn}
            -> mconcat
                [ "Is "
                , toMessage (ifThenElseT _yn "a subject nation" "an independent nation")
                ]
        MsgHasAutonomyState {scriptMessageIcon = _icon, scriptMessageWhat = _what}
            -> mconcat
                [ "Has autonomy level of "
                , _icon
                , " "
                , _what
                ]
        MsgAddOpinion {scriptMessageModid = _modid, scriptMessageWhat = _what, scriptMessageWhom = _whom}
            -> mconcat
                [ "Gains opinion modifier {{opinion|"
                , _modid
                , "}} towards "
                , _whom
                ]
        MsgReverseAddOpinion {scriptMessageModid = _modid, scriptMessageWhat = _what, scriptMessageWho = _who}
            -> mconcat
                [ _who
                , " gains opinion modifier {{opinion|"
                , _modid
                , "}} towards this country"
                ]
        MsgAddOpinionDur {scriptMessageModid = _modid, scriptMessageWhat = _what, scriptMessageWhom = _whom, scriptMessageYears = _years}
            -> mconcat
                [ "Gain opinion modifier {{opinion|"
                , _modid
                , "}} towards "
                , _whom
                , " for "
                , toMessage (plainNumMin _years)
                , " years"
                ]
        MsgReverseAddOpinionDur {scriptMessageModid = _modid, scriptMessageWhat = _what, scriptMessageWho = _who, scriptMessageYears = _years}
            -> mconcat
                [ _who
                , " gains opinion modifier {{opinion|"
                , _modid
                , "}} towards this country for "
                , toMessage (plainNumMin _years)
                , " years"
                ]
        MsgHasDynamicMod {scriptMessageModid = _modid}
            -> mconcat
                [ "Has the dynamic modifier "
                , toMessage (iquotes _modid)
                ]
        MsgHasDynamicModFlag {scriptMessageWho = _who, scriptMessageModid = _modid}
            -> mconcat
                [ _who
                , " has the dynamic modifier "
                , toMessage (iquotes _modid)
                ]
        MsgHasOpinionMod {scriptMessageModid = _modid}
            -> mconcat
                [ "Has opinion modifier {{opinion|"
                , _modid
                , "|0}}"
                ]
        MsgHasPowerBalance {scriptMessageWhat = _what}
            -> mconcat
                [ _what
                , " is active"
                ]
        MsgRemoveOpinionMod {scriptMessageModid = _modid, scriptMessageWhat = _what, scriptMessageWhom = _whom}
            -> mconcat
                [ "Lose opinion modifier {{opinion|"
                , _modid
                , "}} towards "
                , _whom
                ]
        MsgCountryEvent
            -> "country event"
        MsgNewsEvent
            -> "news event"
        MsgStateEvent
            -> "state event"
        MsgOperativeEvent
            -> "operative event"
        MsgUnitLeaderEvent
            -> "unit leader event"
        MsgTriggerEvent {scriptMessageEvttype = _evttype, scriptMessageEvtid = _evtid, scriptMessageName = _name}
            -> mconcat
                [ "Trigger "
                , _evttype
                , " "
                , toMessage (iquotes _name)
                , " <!-- "
                , _evtid
                , " -->"
                ]
        MsgTriggerEventDays {scriptMessageEvttype = _evttype, scriptMessageEvtid = _evtid, scriptMessageName = _name, scriptMessageDays = _days}
            -> mconcat
                [ "Trigger "
                , _evttype
                , " "
                , toMessage (iquotes _name)
                , " <!-- "
                , _evtid
                , " --> in "
                , toMessage (formatDays _days)
                ]
        MsgTriggerEventTime {scriptMessageEvttype = _evttype, scriptMessageEvtid = _evtid, scriptMessageName = _name, scriptMessageTime = _time}
            -> mconcat
                [ "Trigger "
                , _evttype
                , " "
                , toMessage (iquotes _name)
                , " <!-- "
                , _evtid
                , " --> in "
                , _time
                ]
        MsgDeclareWarOn {scriptMessageWhom = _whom, scriptMessageWhat = _war, scriptMessageStates = _states}
            -> mconcat
                [ "Declares a "
                , toMessage (italicText _war)
                , " war "
                , _states
                , " against "
                , _whom
                ]
        MsgHasDLC {scriptMessageIcon = _icon, scriptMessageDlc = _dlc}
            -> mconcat
                [ "DLC "
                , _icon
                , " "
                , _dlc
                , " is enabled"
                ]
        MsgSetDemilitarizedZone {scriptMessageYn = _yn}
            -> mconcat
                [ "Is "
                , toMessage (ifThenElseT _yn "demilitarized" "remilitarized")
                ]
        MsgHasIdea {scriptMessageWhat = _what, scriptMessageIcon = _icon, scriptMessageKey = _key, scriptMessageLoc = _loc}
            -> mconcat
                [ "Has the "
                , _what
                , " "
                , ifThenElseT (T.null _icon) "" ("[[File:" <> _icon <> ".png|28px]] ")
                , "<!-- "
                , _key
                , " -->"
                , toMessage (iquotes _loc)
                ]
        MsgAddIdea {scriptMessageWhat = _what, scriptMessageIcon = _icon, scriptMessageKey = _key, scriptMessageLoc = _loc}
            -> mconcat
                [ "Gets the "
                , _what
                , " "
                , ifThenElseT (T.null _icon) "" ("[[File:" <> _icon <> ".png|28px]] ")
                , "<!-- "
                , _key
                , " -->"
                , toMessage (iquotes _loc)
                ]
        MsgRemoveIdea {scriptMessageWhat = _what, scriptMessageIcon = _icon, scriptMessageKey = _key, scriptMessageLoc = _loc}
            -> mconcat
                [ "Remove the "
                , _what
                , " "
                , ifThenElseT (T.null _icon) "" ("[[File:" <> _icon <> ".png|28px]] ")
                , "<!-- "
                , _key
                , " -->"
                , toMessage (iquotes _loc)
                ]
        MsgAddTimedIdea {scriptMessageWhat = _what, scriptMessageIcon = _icon, scriptMessageKey = _key, scriptMessageLoc = _loc, scriptMessageDays = _days}
            -> mconcat
                [ "Gets the "
                , _what
                , " "
                , "[[File:"
                , _icon
                ,".png|28px]]"
                , " <!-- "
                , _key
                ,  " -->"
                , toMessage (iquotes _loc)
                ," for "
                , toMessage (formatDays _days)
                ]
        MsgModifyTimedIdea {scriptMessageWhat = _what, scriptMessageIcon = _icon, scriptMessageKey = _key, scriptMessageLoc = _loc, scriptMessageDays = _days}
            -> mconcat
                [ "Extend the "
                , _what
                , " "
                , "[[File:"
                , _icon
                ,".png|28px]]"
                , " <!-- "
                , _key
                ,  " -->"
                , toMessage (iquotes _loc)
                ," by "
                , toMessage (formatDays _days)
                ]
        MsgModifyIdea { scriptMessageKey = _key, scriptMessageCategory2 = _cat2, scriptMessageIcon2 = _icon2, scriptMessageKey2 = _key2, scriptMessageLoc2 = _loc2}
            -> mconcat
                [ "Modify the "
                , "<!-- "
                , _key
                ,  " -->"
                , _cat2
                , " "
                , "[[File:"
                , _icon2
                ,".png|28px]]"
                , " <!-- "
                , _key2
                ,  " -->"
                , toMessage (iquotes _loc2)
                ]
        MsgReplaceIdea { scriptMessageCategory = _cat, scriptMessageIcon = _icon, scriptMessageKey = _key, scriptMessageLoc = _loc, scriptMessageCategory2 = _cat2, scriptMessageIcon2 = _icon2, scriptMessageKey2 = _key2, scriptMessageLoc2 = _loc2}
            -> mconcat
                [ "Replace the "
                , _cat
                , " "
                , "[[File:"
                , _icon
                ,".png|28px]]"
                , " <!-- "
                , _key
                ,  " -->"
                , toMessage (iquotes _loc)
                ," with the "
                , _cat2
                , " "
                , "[[File:"
                , _icon2
                ,".png|28px]]"
                , " <!-- "
                , _key2
                ,  " -->"
                , toMessage (iquotes _loc2)
                ]
        MsgEffectBox {scriptMessageLoc = _loc, scriptMessageKey = _key, scriptMessageIcon = _icon, scriptMessageDesc = _desc}
            -> mconcat
                [ "{{effectbox|"
                , _loc
                , " <!-- "
                , _key
                ,  " -->"
                , "|file="
                , _icon
                , "|"
                , _desc
                , "\n"
                , "|modifiers="
                ]
        MsgEffectBoxEnd { scriptMessageIndent = _indent}
            -> mconcat
                [ "|indent = "
                , T.pack $ show _indent
                , "}}\n"
                ]
        MsgShowIdea {scriptMessageLoc = _loc, scriptMessageKey = _key}
            -> mconcat
                [ _loc
                , " <!-- "
                , _key
                ,  " -->"
                , ", which grants"
                ]
        MsgHasOpinion {scriptMessageAmtText = _amtT, scriptMessageWhom = _whom, scriptMessageCompare = _comp}
            -> mconcat
                [ "Has opinion of "
                , _whom
                , " of "
                , _comp
                , " {{icon|opinion}} "
                , _amtT
                ]
        MsgSetRule {scriptMessageAmt = _amt}
            -> mconcat
                ["Set the "
                , plural _amt "rule:" "rules:"
                ]
        MsgSetRuleYesNo {scriptMessageIcon = _icon, scriptMessageWhat = _what}
            -> mconcat
                [ _icon
                , " "
                , _what
                ]
        MsgSetTechnology {scriptMessageAmt = _amt, scriptMessageWhat = _what}
            -> mconcat
                [ ifThenElseT (_amt == 0) "Remove" "Add"
                , " technology: "
                , _what
                ]
        MsgAddDoctrineCostReduction {scriptMessageAmt = _amt, scriptMessageAmt2 = _amt2, scriptMessageWhat = _what }
            -> mconcat
                [ "Gain "
                , toMessage $ templateColor (colourNum True _amt)
                , plural _amt " use" " uses"
                , " of "
                , toMessage $ templateColor (reducedNum (colourPcSign True) _amt2)
                , " "
                , _what
                , "doctrine cost reduction for:"
                ]
        MsgAddEquipmentToStockpile {scriptMessageAmt = _amt, scriptMessageWho = _who, scriptMessageWhat = _what, scriptMessageWhat2 = _what2 }
            -> mconcat
                [ toMessage (bold (plainNum _amt))
                , " units of "
                , _who
                , ifThenElseT (T.null _who) "" " "
                , _what
                , ifThenElseT (T.null _what2) "" ("(" <> italicText _what2 <> ")")
                , " is "
                , addedOrRemoved _amt
                , ifThenElseT (_amt < 0) " from" " to"
                , " the national Stockpile"
                ]
        MsgAddEquipmentToStockpileVar {scriptMessageAmtText = _amtT, scriptMessageWho = _who, scriptMessageWhat = _what, scriptMessageWhat2 = _what2 }
            -> mconcat
                [ "Value of "
                , typewriterText _amtT
                , " is added/removed in units of "
                , _who
                , ifThenElseT (T.null _who) "" " "
                , _what
                , ifThenElseT (T.null _what2) "" ("(" <> italicText _what2 <> ")")
                , " to the national Stockpile"
                ]
        MsgFreeBuildingSlots {scriptMessageCompare = _comp, scriptMessageAmt = _amt, scriptMessageWhat = _what, scriptMessageYn = _yn }
            -> mconcat
                [ "Has "
                , _comp
                , " "
                , toMessage (bold (plainNumMin _amt))
                , " free {{icon|building slot|}} "
                , plural _amt "building slot" "building slots"
                , " for "
                , _what
                , " "
                , toMessage (ifThenElseT _yn "including locked slots" "")
                ]
        MsgIsDemilitarizedZone {scriptMessageYn = _yn}
            -> mconcat
                [ "Is "
                , toMessage (ifThenElseT _yn "" " ''not''")
                , " a demilitiarized zone"
                ]
        MsgNoBaseWeight
            -> "(no base weight?)"
        MsgAIBaseWeight {scriptMessageAmt = _amt}
            -> mconcat
                [ "Base weight: "
                , toMessage (plainNumMin _amt)
                ]
        MsgAIFactorOneline {scriptMessageFactor = _factor, scriptMessageMultiplier = _multiplier}
            -> mconcat
                [ "Base weight * "
                , toMessage (bold (plainNumMin _multiplier))
                , " if the following is true: "
                ,_factor
                ]
        MsgAIAddOneline {scriptMessageFactor = _factor, scriptMessageMultiplier = _multiplier}
            -> mconcat
                [ "Base weight "
                , toMessage (bold (plainNumSign _multiplier))
                , " if the following is true: "
                ,_factor
                ]
        MsgAIFactorHeader {scriptMessageMultiplier = _multiplier}
            -> mconcat
                [ "* Base weight * "
                , toMessage (bold (plainNumMin _multiplier))
                , " if the following are true:"
                ]
        MsgAIAddHeader {scriptMessageMultiplier = _multiplier}
            -> mconcat
                [ "* Base weight "
                , toMessage (bold (plainNumSign _multiplier))
                , " if the following are true:"
                ]
        MsgResetProvinceName {scriptMessageAmt = _amt}
            -> mconcat
                [ "Reset the name of the province ("
                , toMessage (roundNumNoSpace _amt)
                , ")"
                ]
        MsgHasCompletedFocus {scriptMessageIcon = _icon, scriptMessageWhat = _what, scriptMessageLoc = _loc}
            -> mconcat
                [ "Has completed national focus "
                , "[[File:"
                , _icon
                , ".png|28px]]"
                , " <!-- "
                , _what
                , " -->"
                , toMessage (iquotes _loc)
                ]
        MsgCompleteNationalFocus {scriptMessageIcon = _icon, scriptMessageWhat = _what, scriptMessageLoc = _loc}
            -> mconcat
                [ "Complete national focus "
                , "[[File:"
                , _icon
                , ".png|28px]]"
                , " <!-- "
                , _what
                , " -->"
                , toMessage (iquotes _loc)
                ]
        MsgUnlockNationalFocus {scriptMessageIcon = _icon, scriptMessageWhat = _what, scriptMessageLoc = _loc}
            -> mconcat
                [ "Unlock national focus "
                , "[[File:"
                , _icon
                , ".png|28px]]"
                , " <!-- "
                , _what
                , " -->"
                , toMessage (iquotes _loc)
                ]
        MsgFocus {scriptMessageIcon = _icon, scriptMessageWhat = _what, scriptMessageLoc = _loc}
            -> mconcat
                [ "[[File:"
                , _icon
                , ".png|x36px|alt="
                , _loc
                ,"|link=#"
                , _loc
                , "]]"
                , " <!-- "
                , _what
                , " -->"
                , toMessage (iquotes _loc)
                ]
        MsgFocusProgress {scriptMessageIcon = _icon, scriptMessageWhat = _what, scriptMessageLoc = _loc, scriptMessageCompare = _comp}
            -> mconcat
                [ "Has progressed national focus "
                , "[[File:"
                , _icon
                , ".png|28px]]"
                , " <!-- "
                , _what
                , " -->"
                , toMessage (bold (iquotes _loc))
                , " "
                , _comp
                ]
        MsgUncompleteNationalFocus {scriptMessageIcon = _icon, scriptMessageWhat = _what, scriptMessageLoc = _loc, scriptMessageYn = _yn}
            -> mconcat
                [ "Uncomplete national focus "
                , "[[File:"
                , _icon
                , ".png|28px]]"
                , " <!-- "
                , _what
                , " -->"
                , toMessage (iquotes _loc)
                , ifThenElseT _yn " and uncomplete all children focus'" ""
                ]
        MsgHasArmySize {scriptMessageCompare = _comp, scriptMessageAmt = _amt, scriptMessageWhat = _what}
            -> mconcat
                [ "Has "
                , _comp
                , " "
                , toMessage (bold (plainNumMin _amt))
                , _what
                , plural _amt " division" " divisions"
                ]
        MsgHasNavySize {scriptMessageCompare = _comp, scriptMessageAmt = _amt, scriptMessageWhat = _what}
            -> mconcat
                [ "Has "
                , _comp
                , " "
                , toMessage (bold (plainNumMin _amt))
                , _what
                , plural _amt " ship" " ships"
                ]
        MsgHasNavySizeVar {scriptMessageCompare = _comp, scriptMessageAmtText = _amtT, scriptMessageWhat = _what}
            -> mconcat
                [ "Has "
                , _comp
                , " "
                , typewriterText _amtT
                , _what
                , " ships"
                ]
        MsgSetCapital {scriptMessageWhat = _what, scriptMessageWhere = _where}
            -> mconcat
                [ "Change capital to "
                , _what
                , ifThenElseT (T.null _where) "" ("<!-- " <> _where <> " -->")
                ]
        MsgSetCharacterName {scriptMessageWhat = _what}
            -> mconcat
                [ "Change name to "
                , _what
                ]
        MsgSetCharacterNameType {scriptMessageWho = _who, scriptMessageWhat = _what}
            -> mconcat
                [ "Changes "
                , _who
                , "'s name to "
                , _what
                ]
        MsgHasCharacter {scriptMessageWho = _who}
            -> mconcat
                [ _who
                , " is active in this country"
                ]
        MsgRetireCharacter {scriptMessageWho = _who}
            -> mconcat
                [ "Retire "
                , _who
                ]
        MsgSetPopularity {scriptMessageIcon = _icon, scriptMessageWhat = _what, scriptMessageAmt = _amt}
            -> mconcat
                [ "{{icon|"
                , _icon
                ,"}} "
                , _what
                , ": "
                , toMessage (bold (plainPcMin _amt))
                ]
        MsgSetPopularityVar {scriptMessageIcon = _icon, scriptMessageWhat = _what, scriptMessageAmtText = _amtT}
            -> mconcat
                [ "{{icon|"
                , _icon
                ,"}} "
                , _what
                , ": "
                , typewriterText _amtT
                ]
        MsgStateId {scriptMessageWhat = _what}
            -> mconcat
                [ "Is state "
                , _what
                ]
        MsgTransferState {scriptMessageWhat = _what}
            -> mconcat
                [ "Becomes owner and controller of "
                , _what
                ]
        MsgSetStateName {scriptMessageWhat = _what}
            -> mconcat
                [ "Rename state to "
                , _what
                ]
        MsgSetStateCategory {scriptMessageWhat = _what}
            -> mconcat
                [ "Set state category to "
                , _what
                ]
        MsgAlways {scriptMessageYn = _yn}
            -> toMessage (ifThenElseT _yn "{{icon|yes}} Always" "{{icon|no}} Never")
        MsgLockDivision {scriptMessageYn = _yn}
            -> mconcat
                [ ifThenElseT _yn "Disable" "Enable"
                , " editing of all templates of this country and training or disbanding units belonging to them."
                ]
        MsgIsUnitLeader {scriptMessageYn = _yn}
            -> mconcat
                [ "Is"
                , toMessage (ifThenElseT _yn "" " ''not''")
                , " a unit leader"
                ]
        MsgAddStateModifier
            -> "Add the following modifiers:"
        MsgAddPowerBalanceModifier {scriptMessageWho = _who, scriptMessageWhoKey = _okey, scriptMessageWhat = _what, scriptMessageWhatKey = _akey }
            -> mconcat
                [ "Adds modifier"
                , _what
                , "<!--", _akey, "-->"
                , " to "
                , _who
                , "<!--", _okey, "-->"
                ]
        MsgRemovePowerBalanceModifier {scriptMessageWho = _who, scriptMessageWhoKey = _okey, scriptMessageWhat = _what, scriptMessageWhatKey = _akey }
            -> mconcat
                [ "Removes modifier "
                , toMessage (iquotes _what)
                , "<!--", _akey, "-->"
                , " from "
                , _who
                , "<!--", _okey, "-->"
                ]
        MsgHasPowerBalanceModifier {scriptMessageWho = _who, scriptMessageWhoKey = _okey, scriptMessageWhat = _what, scriptMessageWhatKey = _akey }
            -> mconcat
                [ _who
                , "<!--", _okey, "-->"
                , " has modifier "
                , _what
                , "<!--", _akey, "-->"
                ]
        MsgModifier {scriptMessageWhat = _what, scriptMessageAmt = _amt}
            -> mconcat
                [ _what
                , ":  "
                , toMessage (bold (plainNumMin _amt))
                ]
        MsgModifierYellow {scriptMessageWhat = _what, scriptMessageAmt = _amt}
            -> mconcat
                [ _what
                , ": {{color|yellow|"
                , toMessage (bold (plainNumMin _amt))
                , "}}"
                ]
        MsgModifierSign {scriptMessageWhat = _what, scriptMessageAmt = _amt}
            -> mconcat
                [ _what
                , ": {{color|yellow|"
                , toMessage (plainNumSign _amt)
                , "}}"
                ]
        MsgModifierColourPos {scriptMessageWhat = _what, scriptMessageAmt = _amt}
            -> mconcat
                [ _what
                , ": "
                , toMessage $ templateColor (colourNumSign True _amt)
                ]
        MsgModifierColourNeg {scriptMessageWhat = _what, scriptMessageAmt = _amt}
            -> mconcat
                [ _what
                , ": "
                , toMessage $ templateColor (colourNumSign False _amt)
                ]
        MsgModifierPc {scriptMessageWhat = _what, scriptMessageAmt = _amt}
            -> mconcat
                [ _what
                , ": "
                , toMessage (bold (plainPcMin _amt))
                ]
        MsgModifierPcSign {scriptMessageWhat = _what, scriptMessageAmt = _amt}
            -> mconcat
                [ _what
                , ": {{color|yellow|"
                , toMessage (bold (plainPcSign _amt))
                , "}}"
                ]
        MsgModifierPcReduced {scriptMessageWhat = _what, scriptMessageAmt = _amt}
            -> mconcat
                [ _what
                , ": "
                , toMessage (bold (reducedNum plainPcMin _amt))
                ]
        MsgModifierPcReducedSign {scriptMessageWhat = _what, scriptMessageAmt = _amt}
            -> mconcat
                [ _what
                , ": {{color|yellow|"
                , toMessage (reducedNum plainPcSign _amt)
                , "}}"
                ]
        MsgModifierPcReducedSignMin {scriptMessageWhat = _what, scriptMessageAmt = _amt}
            -> mconcat
                [ _what
                , ": {{color|yellow|"
                , toMessage (reducedNum plainPcMin _amt)
                , "}}"
                ]
        MsgModifierPcPos {scriptMessageWhat = _what, scriptMessageAmt = _amt}
            -> mconcat
                [ _what
                , ": "
                , toMessage $ templateColor (colourPcSign True _amt)
                ]
        MsgModifierPcNeg {scriptMessageWhat = _what, scriptMessageAmt = _amt}
            -> mconcat
                [ _what
                , ": "
                , toMessage $ templateColor (colourPcSign False _amt)
                ]
        MsgModifierPcPosReduced {scriptMessageWhat = _what, scriptMessageAmt = _amt}
            -> mconcat
                [ _what
                , ": "
                , toMessage $ templateColor (reducedNum (colourPcSign True) _amt)
                ]
        MsgModifierPcNegReduced {scriptMessageWhat = _what, scriptMessageAmt = _amt}
            -> mconcat
                [ _what
                , ": "
                , toMessage $ templateColor (reducedNum (colourPcSign False) _amt)
                ]
        MsgModifierBop {scriptMessageWhat = _what, scriptMessageAmt = _amt}
            -> mconcat
                [ _what
                , ": "
                , bopicon _amt
                , toMessage (bold (reducedNum plainPc _amt))
                ]
        MsgModifierNoYes {scriptMessageWhat = _what, scriptMessageAmt = _amt}
            -> mconcat
                [ _what
                , ": "
                , if _amt /= 0 then "{{color|red|Yes}}" else "{{color|green|No}} <!-- This should not appear -->"
                ]
        MsgModifierYesNo {scriptMessageWhat = _what, scriptMessageAmt = _amt}
            -> mconcat
                [ _what
                , ": "
                , if _amt /= 0 then "{{color|green|Yes}}" else "{{color|red|No}} <!-- This should not appear -->"
                ]
        MsgModifierVar {scriptMessageWhat = _what, scriptMessageAmtText = _amtT}
            -> mconcat
                [ _what
                , ": "
                , typewriterText _amtT
                ]
        MsgCustomModifierTooltip {scriptMessageLoc = _what}
            -> mconcat
                [ "Custom modifier tooltip: "
                , _what
                ]
        MsgAddCompliance {scriptMessageAmt = _amt}
            -> mconcat
                [ "Compliance:"
                , toMessage $ templateColor (colourPcSign True _amt)
                ]
        MsgAddResearchSlot {scriptMessageAmt = _amt}
            -> mconcat
                [ gainOrLose _amt
                , " "
                , toMessage $ templateColor (colourNum True _amt)
                , plural _amt " research slot" " research slots"
                ]
        MsgAddResistance {scriptMessageAmt = _amt}
            -> mconcat
                [ "Resistance: "
                , toMessage $ templateColor (colourPcSign False _amt)
                ]
        MsgAddThreat {scriptMessageAmt = _amt}
            -> mconcat
                [ "{{icon|world tension|1}} is "
                , increasedOrDecreased _amt
                , " by "
                , toMessage $ templateColor (colourNum False _amt)
                ]
        MsgAddNamedThreat {scriptMessageIcon = _icon, scriptMessageAmt = _amt, scriptMessageWhom = _whom}
            -> mconcat
                [ "{{icon|world tension}} "
                , _icon
                , " is "
                , toMessage (increasedOrDecreased _amt)
                , " by "
                , toMessage $ templateColor (colourNumSign False _amt)
                , " ("
                , toMessage (italicText _whom)
                , ")"
                ]
        MsgAddTechBonus {scriptMessageAmt = _amt, scriptMessageName = _name, scriptMessageUses = _uses}
            -> mconcat
                [ "Gain "
                , toMessage $ templateColor (reducedNum (colourPcSign True) _amt)
                , " research bonus "
                , if T.null _name then "" else _name
                , "("
                , toMessage $ templateColor (colourNum True _uses)
                , " "
                , plural _uses "use" "uses"
                , ") towards:"
                ]
        MsgAddTechBonusAhead {scriptMessageAmt = _amt, scriptMessageName = _name, scriptMessageUses = _uses}
            -> mconcat
                [ "Gain "
                , toMessage $ templateColor (colourNum True _amt)
                , plural _amt " year" " years"
                , " ahead of time penalty reduction "
                , if T.null _name then "" else toMessage (italicText _name)
                , "("
                , toMessage $ templateColor (colourNum True  _uses)
                , " "
                , plural _uses "use" "uses"
                , ") towards:"
                ]
        MsgAddTechBonusAheadBoth {scriptMessageBonus = _bonus, scriptMessageYearahead = _year, scriptMessageName = _name, scriptMessageUses = _uses}
            -> mconcat
                [ "Gain "
                , toMessage $ templateColor (reducedNum (colourPcSign True) _bonus)
                , " research bonus or "
                , toMessage $ templateColor (colourNum True _year)
                , plural _year " year" " years"
                , " ahead of time penalty reduction "
                , if T.null _name then "" else toMessage  _name
                , "("
                , toMessage $ templateColor (colourNum True  _uses)
                , " "
                , plural _uses "use" "uses"
                , ") towards:"
                ]
        MsgAddToWar {scriptMessageWho = _who, scriptMessageWhom = _whom, scriptMessageWhy = _why}
            -> mconcat
                [ "Joins "
                , _who
                , " in war against "
                , _whom
                ]
        MsgCreateEquipmentVariant {scriptMessageWhat = _what, scriptMessageWhat2 = _what2}
            -> mconcat
                [ "Create a "
                , toMessage (italicText _what)
                , " variant called "
                , toMessage (iquotes _what2)
                ]
        MsgCreateWG {scriptMessageWhat = _what, scriptMessageWhom = _whom, scriptMessageStates = _state}
            -> mconcat
                [ "Gets a "
                , toMessage (italicText _what)
                , " wargoal"
                , _state
                , " against "
                , _whom
                ]
        MsgCreateWGDuration {scriptMessageWhat = _what, scriptMessageWhom = _whom, scriptMessageAmt = _amt, scriptMessageStates = _state}
            -> mconcat
                [ "Gets a "
                , toMessage (italicText _what)
                , " wargoal "
                , _state
                , " against "
                , _whom
                , " for "
                , toMessage (plainNumMin _amt)
                , " days"
                ]
        MsgRegion {scriptMessageRegion = _region}
            -> mconcat
                [ "State is in strategic area "
                , _region
                ]
        MsgCreateUnit { scriptMessageWho = _who, scriptMessageWhat = _what}
            -> mconcat
                [ "Create "
                , _who
                , " unit based on the "
                , toMessage (italicText _what)
                , " template"
                ]
        MsgSaveEventTargetAs {scriptMessageName = _name}
            -> mconcat
                [ "Save as event target named "
                , typewriterText _name
                ]
        MsgSaveGlobalEventTargetAs {scriptMessageName = _name}
            -> mconcat
                [ "Save as global event target named "
                , typewriterText _name
                ]
        MsgDismantleFaction
            -> "Dismantle faction"
        MsgDropCosmeticTag
            -> "Remove cosmetic tag"
        MsgSetCompliance {scriptMessageAmt = _amt}
            -> mconcat
                [ "Set compliance to "
                , toMessage (bold (plainPcMin _amt))
                ]
        MsgSetPoliticalPower {scriptMessageAmt = _amt}
            -> mconcat
                [ "Set base {{icon|political power|1}} to "
                , toMessage (bold (plainNumMin _amt))
                ]
        MsgSetResistance {scriptMessageAmt = _amt}
            -> mconcat
                [ "Set resistance to "
                , toMessage (bold (plainPcMin _amt))
                ]
        MsgSetStability {scriptMessageAmt = _amt}
            -> mconcat
                [ "Set base {{icon|stability|1}} to "
                , toMessage (bold (reducedNum plainPcMin _amt))
                ]
        MsgSetWarSupport {scriptMessageAmt = _amt}
            -> mconcat
                [ "Set base {{icon|war support|1}} to "
                , toMessage (bold (reducedNum plainPcMin _amt))
                ]
        MsgAddLogistics {scriptMessageAmt = _amt}
            -> mconcat
                [ addOrRemove _amt
                , " Logistics Skill: "
                , toMessage $ templateColor (colourNum True _amt)
                ]
        MsgAddPlanning {scriptMessageAmt = _amt}
            -> mconcat
                [ addOrRemove _amt
                , " Plannning Skill: "
                , toMessage $ templateColor (colourNum True _amt)
                ]
        MsgAddDefense {scriptMessageAmt = _amt}
            -> mconcat
                [ addOrRemove _amt
                , " Defense Skill: "
                , toMessage $ templateColor (colourNum True _amt)
                ]
        MsgAddAttack {scriptMessageAmt = _amt}
            -> mconcat
                [ addOrRemove _amt
                , " Attack Skill: "
                , toMessage $ templateColor (colourNum True _amt)
                ]
        MsgAddCoordination {scriptMessageAmt = _amt}
            -> mconcat
                [ addOrRemove _amt
                , " Coordination Skill: "
                , toMessage $ templateColor (colourNum True _amt)
                ]
        MsgAddManeuver {scriptMessageAmt = _amt}
            -> mconcat
                [ addOrRemove _amt
                , " Maneuvering Skill: "
                , toMessage $ templateColor (colourNum True _amt)
                ]
        MsgSurrenderProgress  {scriptMessageAmt = _amt, scriptMessageCompare = _comp}
            -> mconcat
                [ "Has "
                , _comp
                , " "
                , toMessage (bold (reducedNum plainPcMin _amt))
                , " surrender progress"
                ]
        MsgSurrenderProgressVar  {scriptMessageAmtText = _amtT, scriptMessageCompare = _comp}
            -> mconcat
                [ "Has "
                , _comp
                , " "
                , typewriterText _amtT
                , " surrender progress"
                ]
        MsgVariableTooltip { scriptMessageWhat = _what}
            -> mconcat
                [ "Variable Tooltip: "
                , _what
                ]
        MsgSetVariable { scriptMessageVar1 = _var1, scriptMessageVar2 = _var2}
            -> mconcat
                [ "Set variable "
                , _var1
                , " to the value of "
                , _var2
                ]
        MsgSetTempVariable { scriptMessageVar1 = _var1, scriptMessageVar2 = _var2}
            -> mconcat
                [ "Set temporary variable "
                , _var1
                , " to the value of "
                , _var2
                ]
        MsgSetVariableVal { scriptMessageVar = _var, scriptMessageAmt = _amt}
            -> mconcat
                [ "Set variable "
                , _var
                , " to "
                , toMessage (Doc.ppFloat _amt)
                ]
        MsgSetTempVariableVal { scriptMessageVar = _var, scriptMessageAmt = _amt}
            -> mconcat
                [ "Set temporary variable "
                , _var
                , " to "
                , toMessage (Doc.ppFloat _amt)
                ]
        MsgAddVariable { scriptMessageVar1 = _var1, scriptMessageVar2 = _var2}
            -> mconcat
                [ "Increase variable "
                , _var1
                , " by the value of "
                , _var2
                ]
        MsgAddTempVariable { scriptMessageVar1 = _var1, scriptMessageVar2 = _var2}
            -> mconcat
                [ "Increase temporary variable "
                , _var1
                , " by the value of "
                , _var2
                ]
        MsgAddVariableVal { scriptMessageVar = _var, scriptMessageAmt = _amt}
            -> mconcat
                [ toMessage (increaseOrDecrease _amt)
                , " variable "
                , _var
                , " by "
                , toMessage (plainNum (if _amt < 0 then -_amt else _amt))
                ]
        MsgAddTempVariableVal { scriptMessageVar = _var, scriptMessageAmt = _amt}
            -> mconcat
                [ toMessage (increaseOrDecrease _amt)
                , " temporary variable "
                , _var
                , " by "
                , toMessage (plainNum (if _amt < 0 then -_amt else _amt))
                ]
        MsgSubVariable { scriptMessageVar1 = _var1, scriptMessageVar2 = _var2}
            -> mconcat
                [ "Decrease variable "
                , _var1
                , " by the value of "
                , _var2
                ]
        MsgSubTempVariable { scriptMessageVar1 = _var1, scriptMessageVar2 = _var2}
            -> mconcat
                [ "Decrease temporary variable "
                , _var1
                , " by the value of "
                , _var2
                ]
        MsgSubVariableVal { scriptMessageVar = _var, scriptMessageAmt = _amt}
            -> mconcat
                [ "Decrease variable "
                , _var
                , " by "
                , toMessage (plainNum _amt)
                ]
        MsgSubTempVariableVal { scriptMessageVar = _var, scriptMessageAmt = _amt}
            -> mconcat
                [ "Decrease temporary variable "
                , _var
                , " by "
                , toMessage (plainNum _amt)
                ]
        MsgMulVariable { scriptMessageVar1 = _var1, scriptMessageVar2 = _var2}
            -> mconcat
                [ "Multiply variable "
                , _var1
                , " by the value of "
                , _var2
                ]
        MsgMulTempVariable { scriptMessageVar1 = _var1, scriptMessageVar2 = _var2}
            -> mconcat
                [ "Multiply temporary variable "
                , _var1
                , " by the value of "
                , _var2
                ]
        MsgMulVariableVal { scriptMessageVar = _var, scriptMessageAmt = _amt}
            -> mconcat
                [ "Multiply variable "
                , _var
                , " by "
                , toMessage (plainNumMin _amt)
                ]
        MsgMulTempVariableVal { scriptMessageVar = _var, scriptMessageAmt = _amt}
            -> mconcat
                [ "Multiply temporary variable "
                , _var
                , " by "
                , toMessage (plainNumMin _amt)
                ]
        MsgDivVariable { scriptMessageVar1 = _var1, scriptMessageVar2 = _var2}
            -> mconcat
                [ "Divide variable "
                , _var1
                , " by the value of "
                , _var2
                ]
        MsgDivTempVariable { scriptMessageVar1 = _var1, scriptMessageVar2 = _var2}
            -> mconcat
                [ "Divide temporary variable "
                , _var1
                , " by the value of "
                , _var2
                ]
        MsgDivVariableVal { scriptMessageVar = _var, scriptMessageAmt = _amt}
            -> mconcat
                [ "Divide variable "
                , _var
                , " by "
                , toMessage (plainNumMin _amt)
                ]
        MsgDivTempVariableVal { scriptMessageVar = _var, scriptMessageAmt = _amt}
            -> mconcat
                [ "Divide temporary variable "
                , _var
                , " by "
                , toMessage (plainNumMin _amt)
                ]
        MsgCheckVariable { scriptMessageCompare = _comp, scriptMessageVar1 = _var1, scriptMessageVar2 = _var2}
            -> mconcat
                [ "Value of variable "
                , _var1
                , " is "
                , _comp
                , " "
                , _var2
                ]
        MsgCheckVariableVal { scriptMessageCompare = _comp, scriptMessageVar = _var, scriptMessageAmt = _amt}
            -> mconcat
                [ "Value of variable "
                , _var
                , " is "
                , _comp
                , " "
                , toMessage (plainNumMin _amt)
                ]
        MsgClampVariableValVal { scriptMessageWhat = _what, scriptMessageAmt = _amt, scriptMessageAmt2 = _amt2}
            -> mconcat
                [ "Clamp value of variable "
                , _what
                , " to between "
                , toMessage (plainNumMin _amt)
                , " and "
                , toMessage (plainNumMin _amt2)
                ]
        MsgClampVariableValVar { scriptMessageWhat = _what, scriptMessageAmt = _amt, scriptMessageVar2 = _var2}
            -> mconcat
                [ "Clamp value of variable "
                , _what
                , " to between "
                , toMessage (plainNumMin _amt)
                , " and the value of "
                , _var2
                ]
        MsgClampVariableVarVal { scriptMessageWhat = _what, scriptMessageVar = _var, scriptMessageAmt2 = _amt2}
            -> mconcat
                [ "Clamp value of variable "
                , _what
                , " to between the value of "
                , _var
                , " and "
                , toMessage (plainNumMin _amt2)
                ]
        MsgClampVariableVarVar { scriptMessageWhat = _what, scriptMessageVar = _var, scriptMessageVar2 = _var2}
            -> mconcat
                [ "Clamp value of variable "
                , _what
                , " to between the value of"
                , _var
                , " and the value of"
                , _var2
                ]
        MsgClampTempVariableValVal { scriptMessageWhat = _what, scriptMessageAmt = _amt, scriptMessageAmt2 = _amt2}
            -> mconcat
                [ "Clamp value of temporary variable "
                , _what
                , " to between "
                , toMessage (plainNumMin _amt)
                , " and "
                , toMessage (plainNumMin _amt2)
                ]
        MsgClampTempVariableValVar { scriptMessageWhat = _what, scriptMessageAmt = _amt, scriptMessageVar2 = _var2}
            -> mconcat
                [ "Clamp value of temporary variable "
                , _what
                , " to between "
                , toMessage (plainNumMin _amt)
                , " and the value of "
                , _var2
                ]
        MsgClampTempVariableVarVal { scriptMessageWhat = _what, scriptMessageVar = _var, scriptMessageAmt2 = _amt2}
            -> mconcat
                [ "Clamp value of temporary variable "
                , _what
                , " to between the value of "
                , _var
                , " and "
                , toMessage (plainNumMin _amt2)
                ]
        MsgClampTempVariableVarVar { scriptMessageWhat = _what, scriptMessageVar = _var, scriptMessageVar2 = _var2}
            -> mconcat
                [ "Clamp value of temporary variable "
                , _what
                , " to between the value of"
                , _var
                , " and the value of"
                , _var2
                ]
        MsgEquVariable { scriptMessageVar1 = _var1, scriptMessageVar2 = _var2}
            -> mconcat
                [ "Value of variable "
                , _var1
                , " is equal to that of "
                , _var2
                ]
        MsgEquVariableVal { scriptMessageVar = _var, scriptMessageAmt = _amt}
            -> mconcat
                [ "Value of variable "
                , _var
                , " equal to "
                , toMessage (plainNumMin _amt)
                ]
        MsgRoundVariable { scriptMessageVar = _var }
            -> mconcat
                [ "Round variable "
                , typewriterText _var
                ]
        MsgRoundTempVariable { scriptMessageVar = _var }
            -> mconcat
                [ "Round temporary variable "
                , typewriterText _var
                ]
        MsgClearVariable { scriptMessageVar = _var }
            -> mconcat
                [ "Clear variable "
                , typewriterText _var
                ]
        MsgHasVariable { scriptMessageVar = _var }
            -> mconcat
                [ "Has variable "
                , typewriterText _var
                ]
        MsgActivateDecision { scriptMessageLoc = _loc, scriptMessageKey = _key }
            -> mconcat
                [ "Activate Decision: "
                , toMessage (iquotes _loc)
                , "<!--"
                , _key
                , "-->"
                ]
        MsgRemoveDecision { scriptMessageLoc = _loc, scriptMessageKey = _key }
            -> mconcat
                [ "Remove Decision: "
                , toMessage (iquotes _loc)
                , "<!--"
                , _key
                , "-->"
                ]
        MsgActivateMission { scriptMessageLoc = _loc, scriptMessageKey = _key }
            -> mconcat
                [ "Activate Mission: "
                , toMessage (iquotes _loc)
                , "<!--"
                , _key
                , "-->"
                ]
        MsgRemoveMission { scriptMessageLoc = _loc, scriptMessageKey = _key }
            -> mconcat
                [ "Remove Mission: "
                , toMessage (iquotes _loc)
                , "<!--"
                , _key
                , "-->"
                ]
        MsgHasActiveMission { scriptMessageLoc = _loc, scriptMessageKey = _key }
            -> mconcat
                [ toMessage (iquotes _loc)
                , "<!--"
                , _key
                , "-->"
                , " mission is active"
                ]
        MsgActivateTargetedDecision { scriptMessageWho = _who, scriptMessageLoc = _loc, scriptMessageAtomKey = _key }
            -> mconcat
                [ "Activate Decision "
                , toMessage (iquotes _loc)
                , "<!--"
                , _key
                , "--> on "
                , _who
                ]
        MsgRemoveTargetedDecision { scriptMessageWho = _who, scriptMessageLoc = _loc, scriptMessageAtomKey = _key }
            -> mconcat
                [ "Remove Decision "
                , toMessage (iquotes _loc)
                , "<!--"
                , _key
                , "--> on "
                , _who
                ]
        MsgActivateMissionTooltip { scriptMessageLoc = _loc }
            -> mconcat
                [ "Activate Mission tooltip: "
                , _loc
                ]
        MsgAddDaysRemove { scriptMessageLoc = _loc, scriptMessageKey = _key, scriptMessageAmt = _amt }
            -> mconcat
                [ increaseOrDecrease _amt
                , " duration of decision "
                , toMessage (iquotes _loc)
                , "<!--"
                , _key
                , "--> by "
                , toMessage (bold (plainNum _amt))
                , " days"
                ]
        MsgAddDaysRemoveVar { scriptMessageLoc = _loc, scriptMessageKey = _key, scriptMessageAmtText = _amtT }
            -> mconcat
                [ "Increase or Decrease duration of decision "
                , toMessage (iquotes _loc)
                , "<!--"
                , _key
                , "--> by "
                , typewriterText _amtT
                , " days"
                ]
        MsgAddDaysMissionTimeout { scriptMessageLoc = _loc, scriptMessageKey = _key, scriptMessageAmt = _amt }
            -> mconcat
                [ increaseOrDecrease _amt
                , " duration of mision "
                , toMessage (iquotes _loc)
                , "<!--"
                , _key
                , "--> by "
                , toMessage (bold (plainNum _amt))
                , " days"
                ]
        MsgAddDaysMissionTimeoutVar { scriptMessageLoc = _loc, scriptMessageKey = _key, scriptMessageAmtText = _amtT }
            -> mconcat
                [ "Increase or Decrease duration of mision "
                , toMessage (iquotes _loc)
                , "<!--"
                , _key
                , "--> by "
                , typewriterText _amtT
                , " days"
                ]
        MsgHasDefensiveWar { scriptMessageYn = _yn}
            -> mconcat
                [ "Is "
                , toMessage (ifThenElseT _yn "" "''not'' ")
                , "in a defensive war"
                ]
        MsgHasIntelligenceAgency { scriptMessageYn = _yn}
            -> mconcat
                [ "Has "
                , toMessage (ifThenElseT _yn "" "''not'' ")
                , "created an Intelligence Agency"
                ]
        MsgLoadFocusTree { scriptMessageWhat = _what }
            -> mconcat
                [ "Changes the national focus tree to "
                , typewriterText _what
                ]
        MsgLoadFocusTreeKeep { scriptMessageWhat = _what, scriptMessageYesNo = _yesno }
            -> mconcat
                [ "Changes the national focus tree to "
                , ifThenElseT (_what /= "National Focus") _what "the Generic National Focus"
                , " and"
                , if _yesno == "yes" then "" else " ''don't''"
                , " keep completed focuses"
                ]
        MsgModifyBuildingResources { scriptMessageIcon = _icon, scriptMessageWhat = _what, scriptMessageAmt = _amt }
            -> mconcat
                [ "Modify "
                , _what
                , " resource output by: "
                , toMessage $ templateColor (colourNumSign True _amt)
                , " "
                , _icon
                ]
        MsgCoreCompliance {scriptMessageWho = _who, scriptMessageCompare = _comp, scriptMessageAmt = _amt}
            -> mconcat
                [ "Average compliance is "
                , _comp
                , " "
                , toMessage (bold (plainNumMin _amt))
                , " in "
                , _who
                ]
        MsgCoreComplianceVar {scriptMessageWho = _who, scriptMessageCompare = _comp, scriptMessageAmtText = _amtT}
            -> mconcat
                [ "Average compliance is "
                , _comp
                , " "
                , typewriterText _amtT
                , " in "
                , _who
                ]
        MsgCoreResistance {scriptMessageWho = _who, scriptMessageCompare = _comp, scriptMessageAmt = _amt}
            -> mconcat
                [ "Average resistance is "
                , _comp
                , " "
                , toMessage (bold (plainNumMin _amt))
                , " in "
                , _who
                ]
        MsgCoreResistanceVar {scriptMessageWho = _who, scriptMessageCompare = _comp, scriptMessageAmtText = _amtT}
            -> mconcat
                [ "Average resistance is "
                , _comp
                , " "
                , typewriterText _amtT
                , " in "
                , _who
                ]
        MsgHasVolunteersAmountFrom {scriptMessageWho = _who, scriptMessageCompare = _comp, scriptMessageAmt = _amt}
            -> mconcat
                [ "Has "
                , _comp
                , " "
                , toMessage (bold (plainNumMin _amt))
                , " volunteer divisions from "
                , _who
                ]
        MsgHasVolunteersAmountFromVar {scriptMessageWho = _who, scriptMessageCompare = _comp, scriptMessageAmtText = _amtT}
            -> mconcat
                [ "Has "
                , _comp
                , " "
                , typewriterText _amtT
                , " volunteer divisions from "
                , _who
                ]
        MsgPowerBalanceValue {scriptMessageWhat = _what, scriptMessageCompare = _comp, scriptMessageAmt = _amt}
            -> mconcat
                ["The "
                , _what
                , " is "
                , bopMoreLess _comp _amt
                , " "
                , bopicon _amt
                , toMessage (bold (plainPc _amt))
                ]
        MsgPowerBalanceValueVar {scriptMessageWhat = _what, scriptMessageCompare = _comp, scriptMessageAmtText = _amtT}
            -> mconcat
                [ "The "
                , _what
                , " is "
                , _comp
                , " "
                , typewriterText _amtT
                ]
        MsgHasCivilWar {scriptMessageYn = _yn}
            -> mconcat
                [ "Is"
                , toMessage (ifThenElseT _yn "" " ''not''")
                , " in a civil war"
                ]
        MsgHasGovernment {scriptMessageIcon = _icon, scriptMessageWhat = _what}
            -> mconcat
                [ "Current ruling party is "
                , if T.null _icon then "the same as" else _icon
                , " "
                , _what
                ]
        MsgIsHistoricalFocusOn { scriptMessageYn = _yn }
            -> mconcat
                [ "Historical Focus is "
                , toMessage (ifThenElseT _yn "'''on'''" "'''off'''")
                ]
        MsgIsOperativeCaptured { scriptMessageYn = _yn }
            -> mconcat
                [ "Is "
                , toMessage (ifThenElseT _yn "" "'''not'''")
                , " captured"
                ]
        MsgAirBase {scriptMessageAmt = _amt, scriptMessageCompare = _comp}
            -> mconcat
                [ "Has "
                , _comp
                , " "
                , toMessage (bold (plainNumMin _amt))
                , " {{icon|air base|1}} "
                ]
        MsgAirBaseVar {scriptMessageAmtText = _amtT, scriptMessageCompare = _comp}
            -> mconcat
                [ "Has "
                , _comp
                , " "
                , typewriterText _amtT
                , " {{icon|air base|1}} "
                ]
        MsgAllianceStrengthRatio {scriptMessageAmt = _amt, scriptMessageCompare = _comp}
            -> mconcat
                [ "Estimated army strength ratio of "
                , _comp
                , " "
                , toMessage (bold (reducedNum plainPcMin _amt))
                , " compared to enemies."
                ]
        MsgAllianceStrengthRatioVar {scriptMessageAmtText = _amtT, scriptMessageCompare = _comp}
            -> mconcat
                [ "Estimated army strength ratio of "
                , _comp
                , " "
                , typewriterText _amtT
                , " compared to enemies."
                ]
        MsgAmountResearchSlots {scriptMessageAmt = _amt, scriptMessageCompare = _comp}
            -> mconcat
                [ "Has "
                , _comp
                , " "
                , toMessage (bold (plainNumMin _amt))
                , " research "
                , plural _amt "slot" "slots"
                ]
        MsgAmountResearchSlotsVar {scriptMessageAmtText = _amtT, scriptMessageCompare = _comp}
            -> mconcat
                [ "Has "
                , _comp
                , " "
                , typewriterText _amtT
                , " research slots"
                ]
        MsgAnyWarScore {scriptMessageAmt = _amt, scriptMessageCompare = _comp}
            -> mconcat
                [ "Has "
                , _comp
                , " "
                , toMessage (bold (plainPcMin _amt))
                , " war progress"
                ]
        MsgAnyWarScoreVar {scriptMessageAmtText = _amtT, scriptMessageCompare = _comp}
            -> mconcat
                [ "Has "
                , _comp
                , " "
                , typewriterText _amtT
                , " war progress"
                ]
        MsgArmsFactory {scriptMessageAmt = _amt, scriptMessageCompare = _comp}
            -> mconcat
                [ "Has "
                , _comp
                , " "
                , toMessage (bold (plainNumMin _amt))
                , " {{icon|mic|1}}"
                ]
        MsgArmsFactoryVar {scriptMessageAmtText = _amtT, scriptMessageCompare = _comp}
            -> mconcat
                [ "Has "
                , _comp
                , " "
                , typewriterText _amtT
                , " {{icon|mic|1}}"
                ]
        MsgCommandPower {scriptMessageAmt = _amt, scriptMessageCompare = _comp}
            -> mconcat
                [ "Has "
                , _comp
                , " "
                , toMessage (bold (plainNumMin _amt))
                , " {{icon|command power|1}}"
                ]
        MsgCommandPowerVar {scriptMessageAmtText = _amtT, scriptMessageCompare = _comp}
            -> mconcat
                [ "Has "
                , _comp
                , " "
                , typewriterText _amtT
                , " {{icon|command power|1}}"
                ]
        MsgCompareAutonomyProgressRatio {scriptMessageAmt = _amt, scriptMessageCompare = _comp}
            -> mconcat
                [ "Has "
                , _comp
                , " "
                , toMessage (bold (reducedNum plainPcMin _amt))
                , " {{icon|autonomy|1}} progress"
                ]
        MsgCompareAutonomyProgressRatioVar {scriptMessageAmtText = _amtT, scriptMessageCompare = _comp}
            -> mconcat
                [ "Has "
                , _comp
                , " "
                , typewriterText _amtT
                , " {{icon|autonomy|1}} progress"
                ]
        MsgDockyard {scriptMessageAmt = _amt, scriptMessageCompare = _comp}
            -> mconcat
                [ "Has "
                , _comp
                , " "
                , toMessage (bold (plainNumMin _amt))
                , " {{icon|nic|1}}"
                ]
        MsgDockyardVar {scriptMessageAmtText = _amtT, scriptMessageCompare = _comp}
            -> mconcat
                [ "Has "
                , _comp
                , " "
                , typewriterText _amtT
                , " {{icon|nic|1}}"
                ]
        MsgCompliance {scriptMessageAmt = _amt, scriptMessageCompare = _comp}
            -> mconcat
                [ "Has "
                , _comp
                , " "
                , toMessage (bold (plainPcMin _amt))
                , " compliance"
                ]
        MsgComplianceVar {scriptMessageAmtText = _amtT, scriptMessageCompare = _comp}
            -> mconcat
                [ "Has "
                , _comp
                , " "
                , typewriterText _amtT
                , " compliance"
                ]
        MsgResistance {scriptMessageAmt = _amt, scriptMessageCompare = _comp}
            -> mconcat
                [ "Has "
                , _comp
                , " "
                , toMessage (bold (plainPcMin _amt))
                , " resistance"
                ]
        MsgResistanceVar {scriptMessageAmtText = _amtT, scriptMessageCompare = _comp}
            -> mconcat
                [ "Has "
                , _comp
                , " "
                , typewriterText _amtT
                , " {resistance"
                ]
        MsgEnemiesStrengthRatio {scriptMessageAmt = _amt, scriptMessageCompare = _comp}
            -> mconcat
                [ "The enemies strength is "
                , _comp
                , " "
                , toMessage (reducedNum plainPcMin _amt)
                , " compared to the current scope"
                ]
        MsgEnemiesStrengthRatioVar {scriptMessageAmtText = _amtT, scriptMessageCompare = _comp}
            -> mconcat
                [ "The enemies strength is "
                , _comp
                , " "
                , typewriterText _amtT
                , " compared to the current scope"
                ]
        MsgIsCharacter {scriptMessageWhat = _what}
            -> mconcat
                [ "Is character "
                ,  toMessage (iquotes _what)
                ]
        MsgIsOnContinent {scriptMessageWhat = _what}
            -> mconcat
                [ "Is on the continent "
                ,  toMessage (iquotes _what)
                ]
        MsgHasCountryLeader {scriptMessageWhom = _whom}
            -> mconcat
                [ "Has leader "
                , toMessage (iquotes _whom)
                ]
        MsgIsIslandState {scriptMessageYn = _yn}
            -> mconcat
                [ "Is"
                , toMessage (ifThenElseT _yn "" " ''not''")
                , " an island state"
                ]
        MsgExportVariable { scriptMessageVar1 = _var1, scriptMessageVar2 = _var2}
            -> mconcat
                [ "Export variable "
                , typewriterText _var2
                , " to "
                , typewriterText _var1
                ]
        MsgExportVariableWho { scriptMessageVar1 = _var1, scriptMessageVar2 = _var2, scriptMessageWhom = _whom}
            -> mconcat
                [ "Export "
                , _whom
                , "'s internal variable "
                , typewriterText _var2
                , " to "
                , typewriterText _var1
                ]
        MsgThreat {scriptMessageAmt = _amt, scriptMessageCompare = _comp}
            -> mconcat
                [ "{{icon|world tension|1}} is "
                , _comp
                , " "
                , toMessage $ bold $ if _amt > 1 then plainPcMin _amt else reducedNum plainPcMin _amt
                ]
        MsgThreatVar {scriptMessageAmtText = _amtT, scriptMessageCompare = _comp}
            -> mconcat
                [ "{{icon|world tension|1}} is "
                , _comp
                , " "
                , typewriterText _amtT
                ]
        MsgFascismCompare {scriptMessageAmt = _amt, scriptMessageCompare = _comp}
            -> mconcat
                [ "{{icon|fascism|1}} popularity is "
                , _comp
                , " "
                , toMessage (bold (reducedNum plainPcMin _amt))
                ]
        MsgFascismCompareVar {scriptMessageAmtText = _amtT, scriptMessageCompare = _comp}
            -> mconcat
                [ "{{icon|fascism|1}} popularity is "
                , _comp
                , " "
                , typewriterText _amtT
                ]
        MsgDemocraticCompare {scriptMessageAmt = _amt, scriptMessageCompare = _comp}
            -> mconcat
                [ "{{icon|democratic|1}} popularity is "
                , _comp
                , " "
                , toMessage (bold (reducedNum plainPcMin _amt))
                ]
        MsgDemocraticCompareVar {scriptMessageAmtText = _amtT, scriptMessageCompare = _comp}
            -> mconcat
                [ "{{icon|democratic|1}} popularity is "
                , _comp
                , " "
                , typewriterText _amtT
                ]
        MsgCommunismCompare {scriptMessageAmt = _amt, scriptMessageCompare = _comp}
            -> mconcat
                [ "{{icon|communism|1}} popularity is "
                , _comp
                , " "
                , toMessage (bold (reducedNum plainPcMin _amt))
                ]
        MsgCommunismCompareVar {scriptMessageAmtText = _amtT, scriptMessageCompare = _comp}
            -> mconcat
                [ "{{icon|communism|1}} popularity is "
                , _comp
                , " "
                , typewriterText _amtT
                ]
        MsgNeutralityCompare {scriptMessageAmt = _amt, scriptMessageCompare = _comp}
            -> mconcat
                [ "{{icon|neutrality|1}} popularity is "
                , _comp
                , " "
                , toMessage (bold (reducedNum plainPcMin _amt))
                ]
        MsgNeutralityCompareVar {scriptMessageAmtText = _amtT, scriptMessageCompare = _comp}
            -> mconcat
                [ "{{icon|neutrality|1}} popularity is "
                , _comp
                , " "
                , typewriterText _amtT
                ]
        MsgAnnexCountry {scriptMessageWhom = _whom, scriptMessageWhat = _what}
            -> mconcat
                [ "Annex "
                , _whom
                , _what
                ]
        MsgSetNationality {scriptMessageWhat = _what}
            -> mconcat
                [ "Set nationality to "
                , _what
                ]
        MsgSetNationalityChar {scriptMessageWho = _who, scriptMessageWhat = _what}
            -> mconcat
                [ "Set nationality of "
                , toMessage (iquotes _who)
                , " to "
                , _what
                ]
        MsgModifyTechSharingBonus {scriptMessageWho = _who, scriptMessageAmt = _amt}
            -> mconcat
                [ "Modify technology sharing bonus "
                , _who
                , " by "
                , toMessage $ templateColor (reducedNum (colourPcSign True) _amt)
                ]
        MsgModifyTechSharingBonusVar {scriptMessageWho = _who, scriptMessageAmtText = _amtT}
            -> mconcat
                [ "Modify technology sharing bonus "
                , _who
                , " by "
                , typewriterText _amtT
                ]
        MsgAddResource {scriptMessageIcon = _icon, scriptMessageWhat = _what, scriptMessageAmt = _amt, scriptMessageWhere = _where}
            -> mconcat
                [ addOrRemove _amt
                , " production of "
                , toMessage $ bold (plainNum _amt)
                , " "
                , _icon
                , " "
                , _what
                , ifThenElseT (T.null _where) "" " to "
                , _where
                ]
        MsgAddResourceVar {scriptMessageIcon = _icon, scriptMessageWhat = _what, scriptMessageAmtText = _amtT, scriptMessageWhere = _where}
            -> mconcat
                [ "Add or Remove production based pn value of "
                , typewriterText _amtT
                , " "
                , _icon
                , " "
                , _what
                , ifThenElseT (T.null _where) "" " to "
                , _where
                ]
        MsgAddPopularity {scriptMessageIcon = _icon, scriptMessageWhat = _what, scriptMessageAmt = _amt}
            -> mconcat
                [ gainOrLose _amt
                , " "
                , toMessage $ bold (reducedNum plainPc _amt)
                , " "
                , _icon
                , " "
                , _what
                , " party popularity"
                ]
        MsgAddPopularityVar {scriptMessageIcon = _icon, scriptMessageWhat = _what, scriptMessageAmtText = _amtT}
            -> mconcat
                [ "Gain or Lose "
                , typewriterText _amtT
                , " "
                , _icon
                , " "
                , _what
                , " party popularity"
                ]
        MsgAddPowerBalanceValue { scriptMessageLoc = _loc, scriptMessageKey = _key, scriptMessageAmt = _amt }
            -> mconcat
                [ "The "
                , _loc
                , "<!--", _key, "-->"
                , " moves "
                , bopicon _amt
                , toMessage (bold (reducedNum plainPc _amt))
                ]
        MsgAddPowerBalanceValueVar { scriptMessageLoc = _loc, scriptMessageKey = _key, scriptMessageAmtText = _amtT }
            -> mconcat
                [ "The "
                , _loc
                , "<!--", _key, "-->"
                , " moves "
                , typewriterText _amtT
                , " to the left or right"
                ]
        MsgBuildRailway {scriptMessageAmt = _amt, scriptMessageStart = _start, scriptMessageEnd = _end}
            -> mconcat
                [ "Build a level "
                , toMessage (bold (plainNumMin _amt))
                , " {{icon|railway|1}} "
                , " from "
                , _start
                , " to "
                , _end
                ]
        MsgBuildRailwayProv {scriptMessageAmt = _amt, scriptMessageStartProv = _start, scriptMessageEndProv = _end}
            -> mconcat
                [ "Build a level "
                , toMessage (bold (plainNumMin _amt))
                , " {{icon|railway|1}} "
                , " from province ("
                , toMessage (roundNumNoSpace _start)
                , ") to province ("
                , toMessage (roundNumNoSpace _end)
                , ")"
                ]
        MsgBuildRailwayPath {scriptMessageAmt = _amt, scriptMessageWhat = _what}
            -> mconcat
                [ "Build a level "
                , toMessage (bold (plainNumMin _amt))
                , " {{icon|railway|1}} "
                , _what
                ]
        MsgCanBuildRailway {scriptMessageStart = _start, scriptMessageEnd = _end}
            -> mconcat
                [ "Can build {{icon|railway|1}} from "
                , _start
                , " to "
                , _end
                ]
        MsgCanBuildRailwayProv {scriptMessageStartProv = _start, scriptMessageEndProv = _end}
            -> mconcat
                [ "Can build {{icon|railway|1}} from province ("
                , toMessage (roundNumNoSpace _start)
                , ") to province ("
                , toMessage (roundNumNoSpace _end)
                , ")"
                ]
        MsgCanBuildRailwayPath {scriptMessagePath = _path }
            -> mconcat
                [ "Can build {{icon|railway|1}} "
                , toMessage _path
                ]
        MsgSetProvinceName {scriptMessageWhom = _whom, scriptMessageAmt = _amt}
            -> mconcat
                [ "Rename the province ("
                , toMessage (roundNumNoSpace _amt)
                , ") to "
                , _whom
                ]
        MsgSetProvinceNameVar {}
            -> "<!-- Something went wrong check script-->"
        MsgSetVictoryPoints {scriptMessageAmt2 = _amt2, scriptMessageAmt = _amt}
            -> mconcat
                [ "Set "
                , toMessage (plainNumMin _amt)
                , " {{icon|vp|1}} to province ("
                , toMessage (roundNum _amt2)
                , ")"
                ]
        MsgSetVictoryPointsVar {scriptMessageAmt2 = _amt2, scriptMessageAmtText = _amtT}
            -> mconcat
                [ "Set "
                , typewriterText _amtT
                , " {{icon|vp|1}} to province ("
                , toMessage (roundNumNoSpace _amt2)
                , ")"
                ]
        MsgAddVictoryPoints {scriptMessageAmt2 = _amt2, scriptMessageAmt = _amt}
            -> mconcat
                [ addOrRemove _amt
                , " "
                , toMessage (plainNum _amt)
                , " {{icon|vp|1}} "
                , ifThenElseT (_amt > 0) "to" "from"
                , " province ("
                , toMessage (roundNum _amt2)
                , ")"
                ]
        MsgAddVictoryPointsVar {scriptMessageAmt2 = _amt2, scriptMessageAmtText = _amtT}
            -> mconcat
                [ "Add or Remove "
                , typewriterText _amtT
                , " {{icon|vp|1}} to province ("
                , toMessage (roundNumNoSpace _amt2)
                , ")"
                ]
        MsgStockpileRatio {scriptMessageWhat = _what, scriptMessageCompare = _comp, scriptMessageAmt = _amt}
            -> mconcat
                [ "Has "
                , _comp
                , " "
                , toMessage (bold (reducedNum plainPcMin _amt))
                , " of fielded "
                , _what
                , " in stockpile"
                ]
        MsgStockpileRatioVar {scriptMessageWhat = _what, scriptMessageCompare = _comp, scriptMessageAmtText = _amtT}
            -> mconcat
                [ "Has "
                , _comp
                , " "
                , typewriterText _amtT
                , " of fielded "
                , _what
                , " in stockpile"
                ]
        MsgStrengthRatio {scriptMessageWhom = _whom, scriptMessageCompare = _comp, scriptMessageAmt = _amt}
            -> mconcat
                [ _whom
                , " has "
                , _comp
                , " "
                , toMessage (bold (reducedNum plainPcMin _amt))
                , " of the number divisions than current scope's"
                ]
        MsgStrengthRatioVar {scriptMessageWhom = _whom, scriptMessageCompare = _comp, scriptMessageAmtText = _amtT}
            -> mconcat
                [ _whom
                , " has "
                , _comp
                , " "
                , typewriterText _amtT
                , " of the number divisions than current scope's"
                ]
        MsgSetCosmeticTag {scriptMessageWhat = _what}
            -> mconcat
                [ "Set cosmetic tag to "
                , typewriterText _what
                ]
        MsgHasCosmeticTag {scriptMessageWhat = _what}
            -> mconcat
                [ "Has cosmetic tag "
                , typewriterText _what
                ]
        MsgHasFocusTree {scriptMessageWhat = _what}
            -> mconcat
                [ "Has the focus tree "
                , typewriterText _what
                ]
        MsgAddAce {scriptMessageName = _name, scriptMessageCallsign = _callsign, scriptMessageSurname = _surname}
            -> mconcat
                [ _name
                , " "
                , "'"
                , _callsign
                , "'"
                , " "
                , _surname
                , " becomes a flying Ace"
                ]
        MsgAddAiStrategy
            -> "Adds AI strategy<!-- check game script if you want more info -->"
        MsgAddAutonomyRatio {scriptMessageWhat = _what, scriptMessageAmt = _amt}
            -> mconcat
                [ gainOrLose _amt
                , if T.null _what then "" else " (" <> italicText _what <> ")"
                , " "
                , toMessage (bold (reducedNum plainPc _amt))
                , " {{icon|autonomy|1}} progress"
                ]
        MsgAddAutonomyRatioVar {scriptMessageWhat = _what, scriptMessageAmtText = _amtT}
            -> mconcat
                [ "Gain or Lose"
                , if T.null _what then "" else " (" <> italicText _what <> ")"
                , " "
                , typewriterText _amtT
                , " {{icon|autonomy|1}} progress"
                ]
        MsgAddAutonomyScore {scriptMessageWhat = _what, scriptMessageAmt = _amt}
            -> mconcat
                [ gainOrLose _amt
                , if T.null _what then "" else " (" <> italicText _what <> ")"
                , " "
                , toMessage (bold (plainNum _amt))
                , " {{icon|autonomy|1}} progress"
                ]
        MsgAddAutonomyScoreVar {scriptMessageWhat = _what, scriptMessageAmtText = _amtT}
            -> mconcat
                [ "Gain or Lose"
                , if T.null _what then "" else " (" <> italicText _what <> ")"
                , " "
                , typewriterText _amtT
                , " {{icon|autonomy|1}} progress"
                ]
        MsgAddFieldMarshalRole {scriptMessageWho = _who}
            -> mconcat
                [ _who
                , ifThenElseT (T.null _who) "Becomes" " becomes"
                , " a Field Marshal"
                ]
        MsgAddCorpsCommanderRole {scriptMessageWho = _who}
            -> mconcat
                [ _who
                , ifThenElseT (T.null _who) "Becomes" " becomes"
                , " a General"
                ]
        MsgAddNavalCommanderRole {scriptMessageWho = _who}
            -> mconcat
                [ _who
                , ifThenElseT (T.null _who) "Becomes" " becomes"
                , " a naval commander"
                ]
        MsgAddAdvisorRole {scriptMessageWho = _who, scriptMessageWhat = _what}
            -> mconcat
                [ _who
                , ifThenElseT (T.null _who) "Becomes" " becomes"
                , " a "
                , _what
                , " with the following effect:"
                ]
        MsgRemoveAdvisorRole {scriptMessageWho = _who, scriptMessageWhat = _what}
            -> mconcat
                [ _who
                , ifThenElseT (T.null _who) "Stops" " stops"
                , " being a "
                , _what
                ]
        MsgAndIsHired
            -> "and is directly hired"
        MsgAddCountryLeaderRole {scriptMessageWho = _who, scriptMessageWhat = _what}
            -> mconcat
                [ _who
                , ifThenElseT (T.null _who) "Becomes" " becomes"
                , " a member of the "
                , boldText _what
                , " party."
                ]
        MsgAddCountryLeaderRolePromoted {scriptMessageWho = _who, scriptMessageWhat = _what}
            -> mconcat
                [ _who
                , ifThenElseT (T.null _who) "Becomes" " becomes"
                , " the leader for the "
                , boldText _what
                , " party."
                ]
        MsgPromoteCharacter {scriptMessageWho = _who}
            -> mconcat
                [ _who
                , ifThenElseT (T.null _who) "Becomes" " becomes"
                , " the leader for their party<!-- check game script for which ideology-->"
                ]
        MsgCreateOperativeLeader {scriptMessageWho = _who, scriptMessageWhat = _what, scriptMessageYn = _yn, scriptMessageYn2 = _yn2}
            -> mconcat
                [ "Create an operative"
                , ifThenElseT (T.null _who)  "" (" named " <> toMessage (iquotes _who))
                , ifThenElseT (T.null _what) "" (" with nationality " <>_what)
                , ifThenElseT _yn " and recruit them" ""
                , ifThenElseT _yn2 " and can be recruited by the spymaster" ""
                ]
        MsgDamageBuilding {scriptMessageIcon = _icon, scriptMessageWhat = _what, scriptMessageAmt = _amt, scriptMessageProvince = _prov}
            -> mconcat
                [ "The "
                ,  _icon
                , " "
                , _what
                , " receives "
                , toMessage $ templateColor (colourNum False _amt)
                , " "
                , plural _amt "level" "levels"
                , " of damage"
                , ifThenElseT (_prov > 0) (" in province (" <> roundNumNoSpace _prov <> ")") ""
                ]
        MsgDamageBuildingVar {scriptMessageIcon = _icon, scriptMessageWhat = _what, scriptMessageAmtText = _amtT, scriptMessageProvince = _prov}
            -> mconcat
                [ "The "
                ,  _icon
                , " "
                , _what
                , " receives "
                , typewriterText _amtT
                , " levels of damage"
                , ifThenElseT (_prov > 0) (" in province (" <> roundNumNoSpace _prov <> ")") ""
                ]
        MsgDeleteUnitTemplateAndunits {scriptMessageYn = _yn, scriptMessageWhat = _what}
            -> mconcat
                [ "Delete template "
                , toMessage (iquotes _what)
                , " and "
                , ifThenElseT _yn "disband" "delete"
                , " all units created from this template"
                ]
        MsgDeleteUnits {scriptMessageYn = _yn, scriptMessageWhat = _what}
            -> mconcat
                [ ifThenElseT _yn "Disband" "Delete"
                , " all units created from template"
                , toMessage (iquotes _what)
                ]
        MsgDeleteUnit {scriptMessageYn = _yn, scriptMessageWhat = _what, scriptMessageWhere = _where}
            -> mconcat
                [ ifThenElseT _yn "Disband" "Delete"
                , " all units"
                , ifThenElseT (T.null _what) "" (" created from template " <> toMessage (iquotes _what))
                , ifThenElseT (T.null _where) "" (" in " <> _where)
                ]
        MsgDivisionTemplate {scriptMessageWhat = _what}
            -> mconcat
                [ "Create "
                , toMessage (iquotes _what)
                , " division template<!--see game script for more info-->"
                ]
        MsgArmyManpowerInState {scriptMessageComp = _comp, scriptMessageAmt = _amt, scriptMessageWhat = _what, scriptMessageWhere = _where}
            -> mconcat
                [ "Has "
                , _comp
                , " "
                , toMessage (bold (plainNumMin _amt))
                , ifThenElseT (T.null _what) "" (" " <> _what)
                , " {{icon|manpower|1}} in state"
                , ifThenElseT (T.null _where) "" (" " <> _where)
                ]
        MsgDivisionsInState {scriptMessageComp = _comp, scriptMessageAmt = _amt, scriptMessageWhat = _what, scriptMessageWhere = _where}
            -> mconcat
                [ "Has "
                , _comp
                , " "
                , toMessage (bold (plainNumMin _amt))
                , ifThenElseT (T.null _what) "" (" " <> _what)
                , " divisions in state"
                , ifThenElseT (T.null _where) "" (" " <> _where)
                ]
        MsgDivisionsInBorderState {scriptMessageComp = _comp, scriptMessageAmt = _amt, scriptMessageWhat = _what, scriptMessageWhere = _where, scriptMessageWhere2 = _where2}
            -> mconcat
                [ "Has "
                , _comp
                , " "
                , toMessage (bold (plainNumMin _amt))
                , ifThenElseT (T.null _what) "" (" " <> _what)
                , " divisions in state"
                , ifThenElseT (T.null _where) "" (" " <> _where)
                , " against border of state "
                , _where2
                ]
        MsgAddOffsiteBuilding {scriptMessageIcon = _icon, scriptMessageWhat = _what, scriptMessageAmt = _amt}
            -> mconcat
                [ "Add "
                , toMessage (bold (plainNumMin _amt))
                , " off map "
                , _icon
                , " "
                , _what
                ]
        MsgAddOffsiteBuildingVar {scriptMessageIcon = _icon, scriptMessageWhat = _what, scriptMessageAmtText = _amtT}
            -> mconcat
                [ "Add "
                , typewriterText _amtT
                , " off map "
                , _icon
                , " "
                , _what
                ]
        MsgReleaseAutonomy {scriptMessageWho = _who, scriptMessageIcon = _icon, scriptMessageWhat = _what, scriptMessageAmt = _amt}
            -> mconcat
                [ "Release "
                , _who
                , " as "
                , _icon
                , " "
                , _what
                , if _amt > 0 then " at {{icon|autonomy|1}} " else ""
                , if _amt > 0 then toMessage (reducedNum plainPcMin _amt) else ""
                ]
        MsgSetAutonomy {scriptMessageWho = _who, scriptMessageIcon = _icon, scriptMessageWhat = _what, scriptMessageAmt = _amt, scriptMessageWar = _war}
            -> mconcat
                [ "Set autonomy level of "
                , _who
                , " to "
                , _icon
                , " "
                , _what
                , if _amt > 0 then " at {{icon|autonomy|1}} " else ""
                , if _amt > 0 then toMessage (reducedNum plainPcMin _amt) else ""
                , _war
                ]
        MsgSetPolitics {scriptMessageIcon = _icon, scriptMessageWho = _who, scriptMessageMonths = _months}
            -> mconcat
                [ "Set the ruling party to "
                , _icon
                , " "
                , _who
                , if _months > 0 then " with elections every " else ""
                , if _months > 0 then formatMonths _months else ""
                ]
        MsgSetPoliticsVar {scriptMessageIcon = _icon, scriptMessageWho = _who, scriptMessageAmtText = _amtT}
            -> mconcat
                [ "Set the ruling party to "
                , _icon
                , " "
                , _who
                ," with elections every "
                , _amtT
                ]
        MsgavalStrengthComparison {scriptMessageAmt = _amt, scriptMessageCompare = _comp, scriptMessageWho = _who, scriptMessageWhat = _what}
            -> mconcat
                [ "Estimated navy strength ratio of"
                , toMessage (bold (reducedNum plainPcMin _amt))
                , " or "
                , _comp
                , " compared to "
                , _who
                , _what
                ]
        MsgStartCivilWar {scriptMessageWhat = _what, scriptMessageAmtText = _amtT}
            -> mconcat
                [ "Start a {{icon|"
                , _what
                , "}} "
                , _what
                , " civil war ("
                , _amtT
                , " size)"
                ]
        MsgStartBorderWar {scriptMessageWhere = _where, scriptMessageWhere2 = _where2, scriptMessageYn = _yn}
            -> mconcat
                [ "Start a border war between "
                , _where
                , " and "
                , _where2
                , ifThenElseT _yn " and transferring ownership of the state to the winner" ""
                ]
        MsgBorderWin
            -> "on win"
        MsgBorderLoss
            -> "on loss"
        MsgBorderCancel
            -> "on cancel"
        MsgBorderDefender
            -> "For the defender"
        MsgBorderAttacker
            -> "For the attacker"
        MsgTriggerBorderEvent {scriptMessageEvttype = _evttype, scriptMessageEvtid = _evtid, scriptMessageName = _name, scriptMessageWho = _who}
            -> mconcat
                [ _who
                , " trigger "
                , toMessage (iquotes _name)
                , " <!-- "
                , _evtid
                , " --> "
                , _evttype
                ]
        MsgSetPartyName {scriptMessageIcon = _icon, scriptMessageWho = _who, scriptMessageWhat = _what}
            -> mconcat
                [ "Set the {{icon|"
                , _icon
                , "}} "
                , _icon
                , " party name to ("
                , _who
                , ") "
                , _what
                ]
        MsgIsInTechSharingGroup {scriptMessageWhat = _what}
            -> mconcat
                [ "Is in the technology sharing group "
                , toMessage (iquotes _what)
                ]
        MsgAddToTechSharingGroup {scriptMessageWhat = _what}
            -> mconcat
                [ "Add to the technology sharing group "
                , toMessage (iquotes _what)
                ]
        MsgRemovePowerBalance {scriptMessageWhat = _what}
            -> mconcat
                [ _what
                , " ends"
                ]
        MsgRemoveDynamicMod {scriptMessageWhat = _what}
            -> mconcat
                [ "Remove the dynamic modifier "
                , toMessage (iquotes _what)
                ]
        MsgHasRule {scriptMessageWhom = _whom, scriptMessageWhat = _what}
            -> mconcat
                [ "Rule "
                , _whom
                , " is set to "
                , typewriterText _what
                ]
        MsgHasCoreOccupationModifier {scriptMessageWho = _who, scriptMessageWhat = _what}
            -> mconcat
                [ "Has Occupation Modifier "
                , boldText _what
                , " in "
                , _who
                ]
        MsgIsPowerBalanceInRange {scriptMessageWho = _who, scriptMessageWhat = _what, scriptMessageWhatKey = _wkey, scriptMessageAtomKey = _akey, scriptMessageAmt = _amt}
            -> mconcat
                [ _who
                , "<!--", _wkey, "-->"
                , " is "
                , boptext _amt
                , " the "
                , toMessage (iquotes _what)
                , "<!--", _akey, "-->"
                , " range"
                ]
        MsgHasOffensiveWar {scriptMessageYn  = _yn}
            -> mconcat
                [ "Is "
                , toMessage (ifThenElseT _yn "" "''not''")
                , " in a offensive war"
                ]
        MsgIsMajor {scriptMessageYn  = _yn}
            -> mconcat
                [ "Is"
                , ifThenElseT _yn "" " ''not''"
                , " a Major country"
                ]
        MsgDate {scriptMessageCompare = _comp, scriptMessageMonth = _month, scriptMessageDay = _day, scriptMessageYear = _year}
            -> mconcat
                [ _comp
                , " "
                , _month
                , ifThenElseT (_day /= 0) (" " <> toMessage (plainNumMin _day)) ""
                , ifThenElseT (_day /= 0) (" of " <> toMessage (roundNumNoSpace _year)) (toMessage (roundNumNoSpace _year))
                ]
        MsgSendEquipment {scriptMessageAmtText = _amtT, scriptMessageWhat = _what, scriptMessageWhom = _whom, scriptMessageYn = _yn}
            -> mconcat
                [ "Send "
                , _amtT
                , " "
                , _what
                , " to "
                , _whom
                , ifThenElseT _yn "" " prioritising older equipment"
                ]
        MsgSetPopularities
            -> "Party Popularities will change:"
        MsgRandomListTrigger
            -> "Only considered if:"
        MsgRandomListModifier {scriptMessageAmt = _amt}
            -> mconcat
                [ "Chance increases '''x "
                , toMessage (plainNumMin _amt)
                , "''' if:"
                ]
        MsgRandomListAddModifier {scriptMessageAmt = _amt}
            -> mconcat
                [ "Chance base weight changes by '''"
                , toMessage (plainNumSign _amt)
                , "''' if:"
                ]
        MsgUnlockDecisionCategoryTooltip {scriptMessageWhat = _what}
            -> mconcat
                [ "Unlock the "
                , boldText _what
                , " decisions"
                ]
        MsgUnlockDecisionTooltip {scriptMessageWhat = _what, scriptMessageKey = _key}
            -> mconcat
                [ "Unlock the "
                , boldText _what
                , "<!--", _key, "-->"
                , " decision"
                ]
        MsgIsPuppet {scriptMessageYn = _yn}
            -> mconcat
                [ "Is "
                , ifThenElseT _yn " a subject" "fully independent"
                ]
        MsgAddDynamicModifier {scriptMessageWhat = _what, scriptMessageWho = _who, scriptMessageDaysText = _days}
            -> mconcat
                [ "Add the dynamic modifier "
                , _what
                , " to "
                , _who
                , if T.null _days then "" else " for "
                , _days
                , " providing the following effects:"
                ]
        MsgIsFactionLeader {scriptMessageYn  = _yn}
            -> mconcat
                [ "Is"
                , ifThenElseT _yn "" " ''not''"
                , " leader of a faction"
                ]
        MsgHasWargoalAgainst {scriptMessageWhom = _whom, scriptMessageWhat = _what}
            -> mconcat
                [ "Has a {{icon|war goal|1}} against "
                , _whom
                , ifThenElseT (T.null _what) "" "<!-- ",_what," -->"
                ]
        MsgHasWargoalAgainstType {scriptMessageWhom = _whom, scriptMessageWhat = _what}
            -> mconcat
                [ "Has a {{icon|war goal}} "
                , _what
                , " war goal against"
                , _whom
                ]
        MsgAddBuildingConstruction {scriptMessageYn = _yn, scriptMessageIcon = _icon, scriptMessageWhat = _type, scriptMessageAmt = _amt, scriptMessageProv = _prov}
            -> mconcat
                [ ifThenElseT _yn "Add " "Start construction of "
                , toMessage (bold (plainNumMin _amt))
                , " "
                , _icon
                , " "
                , _type
                ,_prov
                ]
        MsgAddBuildingConstructionVar {scriptMessageYn = _yn, scriptMessageIcon = _icon, scriptMessageWhat = _type, scriptMessageAmtText = _amtT, scriptMessageProv = _prov}
            -> mconcat
                [ ifThenElseT _yn "Add " "Start construction of "
                , typewriterText _amtT
                , " "
                , _icon
                , " "
                , _type
                ,_prov
                ]
        MsgSetBuildingLevel {scriptMessageIcon = _icon, scriptMessageWhat = _type, scriptMessageAmt = _amt, scriptMessageProv = _prov}
            -> mconcat
                [ "Set "
                , _icon
                , " "
                , _type
                , " to level "
                , toMessage (bold (plainNumMin _amt))
                ,_prov
                ]
        MsgSetBuildingLevelVar {scriptMessageIcon = _icon, scriptMessageWhat = _type, scriptMessageAmtText = _amtT, scriptMessageProv = _prov}
            -> mconcat
                [ "Set "
                , _icon
                , " "
                , _type
                , " to level "
                , typewriterText _amtT
                ,_prov
                ]
        MsgRemoveBuilding {scriptMessageIcon = _icon, scriptMessageWhat = _what, scriptMessageAmt = _amt}
            -> mconcat
                [ "Remove "
                , _icon
                , " "
                , _what
                , " by up to "
                , toMessage $ templateColor (colourNumSign True (negate _amt))
                ]
        MsgRemoveBuildingVar {scriptMessageIcon = _icon, scriptMessageWhat = _what, scriptMessageAmtText = _amtT}
            -> mconcat
                [ "Remove "
                , _icon
                , " "
                , _what
                , " by up to "
                , typewriterText _amtT
                ]
        MsgAddProvinceModifier {scriptMessageYn = _yn, scriptMessageWhat = _type, scriptMessageProv = _prov}
            -> mconcat
                [ ifThenElseT _yn "Add the " "Remove the "
                , _type
                ,_prov
                ]
        MsgAllProvinces
            -> ", on all provinces"
        MsgLimitToBorder
            -> ", on a border province"
        MsgLimitToCoastal
            -> ", on a coastal province"
        MsgLimitToNavalBase
            -> ", on province with a naval base"
        MsgLimitToSupplyNode
            -> ", on province with a supply node"
        MsgLimitToBorderCountry {scriptMessageWho = _who}
            -> mconcat
                [ ", on border with "
                , _who
                ]
        MsgProvinceLevel {scriptMessageComp = _comp, scriptMessageAmt = _amt}
            -> mconcat
                [ ", if level is "
                , _comp
                , " "
                , toMessage (bold (plainNumMin _amt))
                ]
        MsgLimitToVictoryPoint {scriptMessageYn = _yn, scriptMessageComp = _comp, scriptMessageAmt = _amt}
            -> mconcat
                [ ", on provinces with {{icon|vp}} Victory Points"
                , ifThenElseT _yn "" (" " <> _comp <> " " <> toMessage (bold (plainNumMin _amt)))
                ]
    renderMessage _ _ _ = error "Sorry, non-English localisation not yet supported."

-- | Message paired with an indentation level.
type IndentedMessage = (Int, ScriptMessage)
-- | List of messages, paired with their respective indentation levels.
type IndentedMessages = [IndentedMessage]

-- | Convenience synonym.
type StatementHandler g m = GenericStatement -> PPT g m IndentedMessages

-- | Convert a single message to Text.
messageText :: (IsGameData (GameData g), Monad m) => ScriptMessage -> PPT g m Text
messageText msg = do
    mlangs <- getLangs
    return $ renderMessage Script mlangs msg

-- | Select correct icon for balance of power
bopicon :: Double -> Text
bopicon i
    | i > 0 = "{{icon|bop right}}"
    | i < 0 = "{{icon|bop left}}"
    | otherwise = ""

-- | Select correct icon for balance of power
boptext :: Double -> Text
boptext i
    | i > 0 = "to the " <> bopicon i <> "right of"
    | i < 0 = "to the " <> bopicon i <> "left of"
    | otherwise = "at"

-- | More than less than is switched when negative
bopMoreLess :: Text -> Double -> Text
bopMoreLess comp i
    | i < 0 && comp == "more than" = "less than"
    | i < 0 && comp == "less than" = "more than"
    | otherwise = comp

-- | Convert a single message to Doc.
message :: (IsGameData (GameData g), Monad m) => ScriptMessage -> PPT g m Doc
message msg = Doc.strictText <$> messageText msg

templateColor :: Doc -> Doc
templateColor td = Doc.strictText (templateColor' td)

templateColor' :: Doc -> Text
templateColor' td = rr
    where
        gr = T.replace "{{green" "{{color|green" (Doc.doc2text td)
        rr = T.replace "{{red" "{{color|red" gr


-- | Convert a list of messages zipped with their indentation levels to a Doc.
-- Each message is prepended with a number of asterisks (levels of bullet
-- list) equal to its indentation level.
imsg2doc :: (IsGameData (GameData g), Monad m) => IndentedMessages -> PPT g m Doc
imsg2doc msgs = PP.vsep <$>
                mapM (\(i,rm) -> do
                        m <- message rm
                        return (PP.hsep [Doc.strictText (T.replicate i "*"),  m]))
                     msgs

-- | As 'imsg2doc', but use HTML to format the messages instead of wiki markup.
-- This behaves better with <pre> blocks but doesn't play well with idea
-- groups.
imsg2doc_html :: forall g m. (IsGameData (GameData g), Monad m) => IndentedMessages -> PPT g m Doc
imsg2doc_html [] = return mempty
imsg2doc_html msgs@((i,_):_)
    | i > 0     = PP.enclose "<ul>" "</ul>" . fst <$> imsg2doc' msgs
    | otherwise = fst <$> imsg2doc' msgs
    where
        -- Format all (remaining) messages at the current indent level.
        imsg2doc' :: IndentedMessages -> PPT g m (Doc, IndentedMessages)
        imsg2doc' [] = return (mempty, [])
        imsg2doc' [(_, rm)] = do -- Last message.
            m <- message rm
            return (PP.enclose "<li>" "</li>" m, [])
        imsg2doc' ((i, rm):msgs@((i',_):_))
            | i < i' = do
                -- New indent.
                m <- message rm
                -- Format the indented stuff.
                (indented, moremsgs) <- imsg2doc' msgs
                -- Format stuff after the indent.
                (postdoc, restmsgs) <- imsg2doc' moremsgs
                -- Put it all together.
                return (PP.vsep
                            [PP.enclose "<li>" "</li>"
                                (PP.vsep
                                    [m
                                    ,PP.enclose "<ul>" "</ul>" indented])
                            ,postdoc]
                       , restmsgs)
            | i > i' = do
                -- Last message at this level.
                m <- PP.enclose "<li>" "</li>" <$> message rm
                return (m, msgs)
            | otherwise = do
                -- Carry on with this indent level.
                m <- PP.enclose "<li>" "</li>" <$> message rm
                (postdoc, restmsgs) <- imsg2doc' msgs
                return (m <> PP.line <> postdoc, restmsgs)
